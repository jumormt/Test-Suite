; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc45.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc45.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !8 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !15, metadata !DIExpression()), !dbg !16
  %0 = load i32, ptr %n.addr, align 4, !dbg !17
  %conv = sext i32 %0 to i64, !dbg !17
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !18
  ret ptr %call, !dbg !19
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !20 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %0 = load i32, ptr %n.addr, align 4, !dbg !23
  %conv = sext i32 %0 to i64, !dbg !23
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !24
  ret ptr %call, !dbg !25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !26 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load i32, ptr %n.addr, align 4, !dbg !29
  %conv = sext i32 %0 to i64, !dbg !29
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !30
  ret ptr %call, !dbg !31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %0 = load i32, ptr %n.addr, align 4, !dbg !35
  %conv = sext i32 %0 to i64, !dbg !35
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !36
  ret ptr %call, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !38 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load i32, ptr %n.addr, align 4, !dbg !41
  %conv = sext i32 %0 to i64, !dbg !41
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !42
  ret ptr %call, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !44 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, ptr %n.addr, align 4, !dbg !47
  %conv = sext i32 %0 to i64, !dbg !47
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !48
  ret ptr %call, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !50 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %0 = load i32, ptr %n.addr, align 4, !dbg !53
  %conv = sext i32 %0 to i64, !dbg !53
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !54
  ret ptr %call, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @readBuf() #0 !dbg !56 {
entry:
  %mBuf = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %mBuf, metadata !63, metadata !DIExpression()), !dbg !64
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !65
  store ptr %call, ptr %mBuf, align 8, !dbg !64
  %call1 = call ptr @NFRMALLOC(i32 noundef 10), !dbg !66
  %0 = load ptr, ptr %mBuf, align 8, !dbg !67
  store ptr %call1, ptr %0, align 8, !dbg !68
  %1 = load ptr, ptr %mBuf, align 8, !dbg !69
  ret ptr %1, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @freeBuf(ptr noundef %fBuf) #0 !dbg !71 {
entry:
  %fBuf.addr = alloca ptr, align 8
  store ptr %fBuf, ptr %fBuf.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %fBuf.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %0 = load ptr, ptr %fBuf.addr, align 8, !dbg !76
  call void @free(ptr noundef %0) #4, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @SerialReadBuf() #0 !dbg !79 {
entry:
  %n = alloca i32, align 4
  %buf = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %n, metadata !82, metadata !DIExpression()), !dbg !83
  store i32 0, ptr %n, align 4, !dbg !84
  br label %for.cond, !dbg !86

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %n, align 4, !dbg !87
  %cmp = icmp slt i32 %0, 100, !dbg !89
  br i1 %cmp, label %for.body, label %for.end, !dbg !90

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !91, metadata !DIExpression()), !dbg !93
  %call = call ptr @readBuf(), !dbg !94
  store ptr %call, ptr %buf, align 8, !dbg !93
  %1 = load ptr, ptr %buf, align 8, !dbg !95
  %2 = load ptr, ptr %1, align 8, !dbg !97
  %cmp1 = icmp ne ptr %2, inttoptr (i64 10 to ptr), !dbg !98
  br i1 %cmp1, label %if.then, label %if.else, !dbg !99

if.then:                                          ; preds = %for.body
  %3 = load ptr, ptr %buf, align 8, !dbg !100
  %4 = load ptr, ptr %3, align 8, !dbg !102
  %call2 = call i32 (ptr, ...) @printf(ptr noundef getelementptr inbounds ([3 x i8], ptr @.str, i64 0, i64 0), ptr noundef %4), !dbg !103
  br label %if.end, !dbg !104

if.else:                                          ; preds = %for.body
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load ptr, ptr %buf, align 8, !dbg !105
  call void @freeBuf(ptr noundef %5), !dbg !106
  br label %for.inc, !dbg !107

for.inc:                                          ; preds = %if.end
  %6 = load i32, ptr %n, align 4, !dbg !108
  %inc = add nsw i32 %6, 1, !dbg !108
  store i32 %inc, ptr %n, align 4, !dbg !108
  br label %for.cond, !dbg !109, !llvm.loop !110

for.end:                                          ; preds = %for.cond
  ret void, !dbg !113
}

declare dso_local i32 @printf(ptr noundef, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !114 {
entry:
  call void @SerialReadBuf(), !dbg !117
  ret i32 0, !dbg !118
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc45.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "965d0230705cabdc0e1b683275a2fd87")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"uwtable", i32 1}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{!"clang version 14.0.0"}
!8 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !9, file: !9, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!9 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!10 = !DISubroutineType(types: !11)
!11 = !{!12, !13}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !{}
!15 = !DILocalVariable(name: "n", arg: 1, scope: !8, file: !9, line: 5, type: !13)
!16 = !DILocation(line: 5, column: 22, scope: !8)
!17 = !DILocation(line: 6, column: 17, scope: !8)
!18 = !DILocation(line: 6, column: 10, scope: !8)
!19 = !DILocation(line: 6, column: 3, scope: !8)
!20 = distinct !DISubprogram(name: "PLKMALLOC", scope: !9, file: !9, line: 9, type: !10, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!21 = !DILocalVariable(name: "n", arg: 1, scope: !20, file: !9, line: 9, type: !13)
!22 = !DILocation(line: 9, column: 21, scope: !20)
!23 = !DILocation(line: 10, column: 17, scope: !20)
!24 = !DILocation(line: 10, column: 10, scope: !20)
!25 = !DILocation(line: 10, column: 3, scope: !20)
!26 = distinct !DISubprogram(name: "NFRMALLOC", scope: !9, file: !9, line: 13, type: !10, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!27 = !DILocalVariable(name: "n", arg: 1, scope: !26, file: !9, line: 13, type: !13)
!28 = !DILocation(line: 13, column: 21, scope: !26)
!29 = !DILocation(line: 14, column: 17, scope: !26)
!30 = !DILocation(line: 14, column: 10, scope: !26)
!31 = !DILocation(line: 14, column: 3, scope: !26)
!32 = distinct !DISubprogram(name: "CLKMALLOC", scope: !9, file: !9, line: 17, type: !10, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !9, line: 17, type: !13)
!34 = !DILocation(line: 17, column: 21, scope: !32)
!35 = !DILocation(line: 18, column: 17, scope: !32)
!36 = !DILocation(line: 18, column: 10, scope: !32)
!37 = !DILocation(line: 18, column: 3, scope: !32)
!38 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !9, file: !9, line: 21, type: !10, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!39 = !DILocalVariable(name: "n", arg: 1, scope: !38, file: !9, line: 21, type: !13)
!40 = !DILocation(line: 21, column: 21, scope: !38)
!41 = !DILocation(line: 22, column: 17, scope: !38)
!42 = !DILocation(line: 22, column: 10, scope: !38)
!43 = !DILocation(line: 22, column: 3, scope: !38)
!44 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !9, file: !9, line: 25, type: !10, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!45 = !DILocalVariable(name: "n", arg: 1, scope: !44, file: !9, line: 25, type: !13)
!46 = !DILocation(line: 25, column: 21, scope: !44)
!47 = !DILocation(line: 26, column: 17, scope: !44)
!48 = !DILocation(line: 26, column: 10, scope: !44)
!49 = !DILocation(line: 26, column: 3, scope: !44)
!50 = distinct !DISubprogram(name: "LEAKFN", scope: !9, file: !9, line: 29, type: !10, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!51 = !DILocalVariable(name: "n", arg: 1, scope: !50, file: !9, line: 29, type: !13)
!52 = !DILocation(line: 29, column: 18, scope: !50)
!53 = !DILocation(line: 30, column: 17, scope: !50)
!54 = !DILocation(line: 30, column: 10, scope: !50)
!55 = !DILocation(line: 30, column: 3, scope: !50)
!56 = distinct !DISubprogram(name: "readBuf", scope: !57, file: !57, line: 10, type: !58, scopeLine: 10, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!57 = !DIFile(filename: "src/mem_leak/malloc45.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "965d0230705cabdc0e1b683275a2fd87")
!58 = !DISubroutineType(types: !59)
!59 = !{!60}
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64)
!62 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!63 = !DILocalVariable(name: "mBuf", scope: !56, file: !57, line: 12, type: !60)
!64 = !DILocation(line: 12, column: 10, scope: !56)
!65 = !DILocation(line: 12, column: 17, scope: !56)
!66 = !DILocation(line: 13, column: 10, scope: !56)
!67 = !DILocation(line: 13, column: 3, scope: !56)
!68 = !DILocation(line: 13, column: 8, scope: !56)
!69 = !DILocation(line: 14, column: 9, scope: !56)
!70 = !DILocation(line: 14, column: 2, scope: !56)
!71 = distinct !DISubprogram(name: "freeBuf", scope: !57, file: !57, line: 18, type: !72, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!72 = !DISubroutineType(types: !73)
!73 = !{null, !60}
!74 = !DILocalVariable(name: "fBuf", arg: 1, scope: !71, file: !57, line: 18, type: !60)
!75 = !DILocation(line: 18, column: 21, scope: !71)
!76 = !DILocation(line: 21, column: 7, scope: !71)
!77 = !DILocation(line: 21, column: 2, scope: !71)
!78 = !DILocation(line: 22, column: 1, scope: !71)
!79 = distinct !DISubprogram(name: "SerialReadBuf", scope: !57, file: !57, line: 24, type: !80, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!80 = !DISubroutineType(types: !81)
!81 = !{null}
!82 = !DILocalVariable(name: "n", scope: !79, file: !57, line: 25, type: !13)
!83 = !DILocation(line: 25, column: 6, scope: !79)
!84 = !DILocation(line: 26, column: 8, scope: !85)
!85 = distinct !DILexicalBlock(scope: !79, file: !57, line: 26, column: 2)
!86 = !DILocation(line: 26, column: 6, scope: !85)
!87 = !DILocation(line: 26, column: 13, scope: !88)
!88 = distinct !DILexicalBlock(scope: !85, file: !57, line: 26, column: 2)
!89 = !DILocation(line: 26, column: 15, scope: !88)
!90 = !DILocation(line: 26, column: 2, scope: !85)
!91 = !DILocalVariable(name: "buf", scope: !92, file: !57, line: 28, type: !60)
!92 = distinct !DILexicalBlock(scope: !88, file: !57, line: 26, column: 26)
!93 = !DILocation(line: 28, column: 10, scope: !92)
!94 = !DILocation(line: 28, column: 16, scope: !92)
!95 = !DILocation(line: 29, column: 7, scope: !96)
!96 = distinct !DILexicalBlock(scope: !92, file: !57, line: 29, column: 6)
!97 = !DILocation(line: 29, column: 6, scope: !96)
!98 = !DILocation(line: 29, column: 10, scope: !96)
!99 = !DILocation(line: 29, column: 6, scope: !92)
!100 = !DILocation(line: 30, column: 17, scope: !101)
!101 = distinct !DILexicalBlock(scope: !96, file: !57, line: 29, column: 17)
!102 = !DILocation(line: 30, column: 16, scope: !101)
!103 = !DILocation(line: 30, column: 4, scope: !101)
!104 = !DILocation(line: 31, column: 3, scope: !101)
!105 = !DILocation(line: 37, column: 11, scope: !92)
!106 = !DILocation(line: 37, column: 3, scope: !92)
!107 = !DILocation(line: 38, column: 2, scope: !92)
!108 = !DILocation(line: 26, column: 23, scope: !88)
!109 = !DILocation(line: 26, column: 2, scope: !88)
!110 = distinct !{!110, !90, !111, !112}
!111 = !DILocation(line: 38, column: 2, scope: !85)
!112 = !{!"llvm.loop.mustprogress"}
!113 = !DILocation(line: 39, column: 1, scope: !79)
!114 = distinct !DISubprogram(name: "main", scope: !57, file: !57, line: 41, type: !115, scopeLine: 41, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!115 = !DISubroutineType(types: !116)
!116 = !{!13}
!117 = !DILocation(line: 43, column: 2, scope: !114)
!118 = !DILocation(line: 44, column: 1, scope: !114)
