; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc13.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc13.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@a = dso_local global [100 x i32*] zeroinitializer, align 16, !dbg !0
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !18 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %0 = load i32, i32* %n.addr, align 4, !dbg !25
  %conv = sext i32 %0 to i64, !dbg !25
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !26
  ret i8* %call, !dbg !27
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !28 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !29, metadata !DIExpression()), !dbg !30
  %0 = load i32, i32* %n.addr, align 4, !dbg !31
  %conv = sext i32 %0 to i64, !dbg !31
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !32
  ret i8* %call, !dbg !33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !34 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %0 = load i32, i32* %n.addr, align 4, !dbg !37
  %conv = sext i32 %0 to i64, !dbg !37
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !38
  ret i8* %call, !dbg !39
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !40 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !41, metadata !DIExpression()), !dbg !42
  %0 = load i32, i32* %n.addr, align 4, !dbg !43
  %conv = sext i32 %0 to i64, !dbg !43
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !44
  ret i8* %call, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !46 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %0 = load i32, i32* %n.addr, align 4, !dbg !49
  %conv = sext i32 %0 to i64, !dbg !49
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !50
  ret i8* %call, !dbg !51
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !52 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %0 = load i32, i32* %n.addr, align 4, !dbg !55
  %conv = sext i32 %0 to i64, !dbg !55
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !56
  ret i8* %call, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !58 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %0 = load i32, i32* %n.addr, align 4, !dbg !61
  %conv = sext i32 %0 to i64, !dbg !61
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !62
  ret i8* %call, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !64 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !69
  %0 = bitcast i8* %call to i32*, !dbg !69
  %1 = load i32, i32* %i, align 4, !dbg !70
  %idxprom = sext i32 %1 to i64, !dbg !71
  %arrayidx = getelementptr inbounds [100 x i32*], [100 x i32*]* @a, i64 0, i64 %idxprom, !dbg !71
  store i32* %0, i32** %arrayidx, align 8, !dbg !72
  %2 = load i32, i32* %i, align 4, !dbg !73
  %idxprom1 = sext i32 %2 to i64, !dbg !74
  %arrayidx2 = getelementptr inbounds [100 x i32*], [100 x i32*]* @a, i64 0, i64 %idxprom1, !dbg !74
  %3 = load i32*, i32** %arrayidx2, align 8, !dbg !74
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %3), !dbg !75
  ret i32 0, !dbg !76
}

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "a", scope: !2, file: !6, line: 9, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc13.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/malloc13.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 6400, elements: !10)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!10 = !{!11}
!11 = !DISubrange(count: 100)
!12 = !{i32 7, !"Dwarf Version", i32 4}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 7, !"uwtable", i32 1}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"clang version 13.0.0"}
!18 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !19, file: !19, line: 5, type: !20, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!19 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!20 = !DISubroutineType(types: !21)
!21 = !{!22, !9}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DILocalVariable(name: "n", arg: 1, scope: !18, file: !19, line: 5, type: !9)
!24 = !DILocation(line: 5, column: 22, scope: !18)
!25 = !DILocation(line: 6, column: 17, scope: !18)
!26 = !DILocation(line: 6, column: 10, scope: !18)
!27 = !DILocation(line: 6, column: 3, scope: !18)
!28 = distinct !DISubprogram(name: "PLKMALLOC", scope: !19, file: !19, line: 9, type: !20, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!29 = !DILocalVariable(name: "n", arg: 1, scope: !28, file: !19, line: 9, type: !9)
!30 = !DILocation(line: 9, column: 21, scope: !28)
!31 = !DILocation(line: 10, column: 17, scope: !28)
!32 = !DILocation(line: 10, column: 10, scope: !28)
!33 = !DILocation(line: 10, column: 3, scope: !28)
!34 = distinct !DISubprogram(name: "NFRMALLOC", scope: !19, file: !19, line: 13, type: !20, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!35 = !DILocalVariable(name: "n", arg: 1, scope: !34, file: !19, line: 13, type: !9)
!36 = !DILocation(line: 13, column: 21, scope: !34)
!37 = !DILocation(line: 14, column: 17, scope: !34)
!38 = !DILocation(line: 14, column: 10, scope: !34)
!39 = !DILocation(line: 14, column: 3, scope: !34)
!40 = distinct !DISubprogram(name: "CLKMALLOC", scope: !19, file: !19, line: 17, type: !20, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!41 = !DILocalVariable(name: "n", arg: 1, scope: !40, file: !19, line: 17, type: !9)
!42 = !DILocation(line: 17, column: 21, scope: !40)
!43 = !DILocation(line: 18, column: 17, scope: !40)
!44 = !DILocation(line: 18, column: 10, scope: !40)
!45 = !DILocation(line: 18, column: 3, scope: !40)
!46 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !19, file: !19, line: 21, type: !20, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!47 = !DILocalVariable(name: "n", arg: 1, scope: !46, file: !19, line: 21, type: !9)
!48 = !DILocation(line: 21, column: 21, scope: !46)
!49 = !DILocation(line: 22, column: 17, scope: !46)
!50 = !DILocation(line: 22, column: 10, scope: !46)
!51 = !DILocation(line: 22, column: 3, scope: !46)
!52 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !19, file: !19, line: 25, type: !20, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!53 = !DILocalVariable(name: "n", arg: 1, scope: !52, file: !19, line: 25, type: !9)
!54 = !DILocation(line: 25, column: 21, scope: !52)
!55 = !DILocation(line: 26, column: 17, scope: !52)
!56 = !DILocation(line: 26, column: 10, scope: !52)
!57 = !DILocation(line: 26, column: 3, scope: !52)
!58 = distinct !DISubprogram(name: "LEAKFN", scope: !19, file: !19, line: 29, type: !20, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!59 = !DILocalVariable(name: "n", arg: 1, scope: !58, file: !19, line: 29, type: !9)
!60 = !DILocation(line: 29, column: 18, scope: !58)
!61 = !DILocation(line: 30, column: 17, scope: !58)
!62 = !DILocation(line: 30, column: 10, scope: !58)
!63 = !DILocation(line: 30, column: 3, scope: !58)
!64 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 10, type: !65, scopeLine: 10, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!65 = !DISubroutineType(types: !66)
!66 = !{!9}
!67 = !DILocalVariable(name: "i", scope: !64, file: !6, line: 13, type: !9)
!68 = !DILocation(line: 13, column: 6, scope: !64)
!69 = !DILocation(line: 14, column: 9, scope: !64)
!70 = !DILocation(line: 14, column: 4, scope: !64)
!71 = !DILocation(line: 14, column: 2, scope: !64)
!72 = !DILocation(line: 14, column: 7, scope: !64)
!73 = !DILocation(line: 15, column: 16, scope: !64)
!74 = !DILocation(line: 15, column: 14, scope: !64)
!75 = !DILocation(line: 15, column: 2, scope: !64)
!76 = !DILocation(line: 17, column: 1, scope: !64)
