; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc26.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !14 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load i32, ptr %n.addr, align 4, !dbg !22
  %conv = sext i32 %0 to i64, !dbg !22
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !23
  ret ptr %call, !dbg !24
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !25 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %0 = load i32, ptr %n.addr, align 4, !dbg !28
  %conv = sext i32 %0 to i64, !dbg !28
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !29
  ret ptr %call, !dbg !30
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !31 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !32, metadata !DIExpression()), !dbg !33
  %0 = load i32, ptr %n.addr, align 4, !dbg !34
  %conv = sext i32 %0 to i64, !dbg !34
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !35
  ret ptr %call, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !37 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %0 = load i32, ptr %n.addr, align 4, !dbg !40
  %conv = sext i32 %0 to i64, !dbg !40
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !41
  ret ptr %call, !dbg !42
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !43 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !44, metadata !DIExpression()), !dbg !45
  %0 = load i32, ptr %n.addr, align 4, !dbg !46
  %conv = sext i32 %0 to i64, !dbg !46
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !47
  ret ptr %call, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !49 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %0 = load i32, ptr %n.addr, align 4, !dbg !52
  %conv = sext i32 %0 to i64, !dbg !52
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !53
  ret ptr %call, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !55 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %0 = load i32, ptr %n.addr, align 4, !dbg !58
  %conv = sext i32 %0 to i64, !dbg !58
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !59
  ret ptr %call, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @alloc_matrix() #0 !dbg !61 {
entry:
  %i = alloca i32, align 4
  %cptr = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %i, metadata !65, metadata !DIExpression()), !dbg !66
  call void @llvm.dbg.declare(metadata ptr %cptr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !69
  store ptr %call, ptr %cptr, align 8, !dbg !70
  store i32 0, ptr %i, align 4, !dbg !71
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !74
  %cmp = icmp slt i32 %0, 10, !dbg !76
  br i1 %cmp, label %for.body, label %for.end, !dbg !77

for.body:                                         ; preds = %for.cond
  %call1 = call ptr @PLKLEAKFP(i32 noundef 1), !dbg !78
  %1 = load ptr, ptr %cptr, align 8, !dbg !80
  %2 = load i32, ptr %i, align 4, !dbg !81
  %idxprom = sext i32 %2 to i64, !dbg !80
  %arrayidx = getelementptr inbounds ptr, ptr %1, i64 %idxprom, !dbg !80
  store ptr %call1, ptr %arrayidx, align 8, !dbg !82
  br label %for.inc, !dbg !83

for.inc:                                          ; preds = %for.body
  %3 = load i32, ptr %i, align 4, !dbg !84
  %inc = add nsw i32 %3, 1, !dbg !84
  store i32 %inc, ptr %i, align 4, !dbg !84
  br label %for.cond, !dbg !85, !llvm.loop !86

for.end:                                          ; preds = %for.cond
  %4 = load ptr, ptr %cptr, align 8, !dbg !89
  ret ptr %4, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_matrix(ptr noundef %matrix) #0 !dbg !91 {
entry:
  %matrix.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  store ptr %matrix, ptr %matrix.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %matrix.addr, metadata !94, metadata !DIExpression()), !dbg !95
  call void @llvm.dbg.declare(metadata ptr %i, metadata !96, metadata !DIExpression()), !dbg !97
  store i32 0, ptr %i, align 4, !dbg !98
  br label %for.cond, !dbg !100

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !101
  %cmp = icmp slt i32 %0, 10, !dbg !103
  br i1 %cmp, label %for.body, label %for.end, !dbg !104

for.body:                                         ; preds = %for.cond
  %1 = load ptr, ptr %matrix.addr, align 8, !dbg !105
  %2 = load i32, ptr %i, align 4, !dbg !107
  %idxprom = sext i32 %2 to i64, !dbg !105
  %arrayidx = getelementptr inbounds ptr, ptr %1, i64 %idxprom, !dbg !105
  %3 = load ptr, ptr %arrayidx, align 8, !dbg !105
  call void @free(ptr noundef %3) #3, !dbg !108
  br label %for.inc, !dbg !109

for.inc:                                          ; preds = %for.body
  %4 = load i32, ptr %i, align 4, !dbg !110
  %inc = add nsw i32 %4, 1, !dbg !110
  store i32 %inc, ptr %i, align 4, !dbg !110
  br label %for.cond, !dbg !111, !llvm.loop !112

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %matrix.addr, align 8, !dbg !114
  call void @free(ptr noundef %5) #3, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !117 {
entry:
  %dir_list = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %dir_list, metadata !120, metadata !DIExpression()), !dbg !121
  %call = call ptr @alloc_matrix(), !dbg !122
  store ptr %call, ptr %dir_list, align 8, !dbg !123
  %0 = load ptr, ptr %dir_list, align 8, !dbg !124
  call void @free_matrix(ptr noundef %0), !dbg !125
  ret i32 0, !dbg !126
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!8, !9, !10, !11, !12}
!llvm.ident = !{!13}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ab5baec3e2f679f1cef0a9df2749a426")
!2 = !{!3, !4, !6}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 7, !"uwtable", i32 1}
!12 = !{i32 7, !"frame-pointer", i32 2}
!13 = !{!"clang version 14.0.0"}
!14 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !15, file: !15, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!15 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!16 = !DISubroutineType(types: !17)
!17 = !{!7, !18}
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !{}
!20 = !DILocalVariable(name: "n", arg: 1, scope: !14, file: !15, line: 5, type: !18)
!21 = !DILocation(line: 5, column: 22, scope: !14)
!22 = !DILocation(line: 6, column: 17, scope: !14)
!23 = !DILocation(line: 6, column: 10, scope: !14)
!24 = !DILocation(line: 6, column: 3, scope: !14)
!25 = distinct !DISubprogram(name: "PLKMALLOC", scope: !15, file: !15, line: 9, type: !16, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!26 = !DILocalVariable(name: "n", arg: 1, scope: !25, file: !15, line: 9, type: !18)
!27 = !DILocation(line: 9, column: 21, scope: !25)
!28 = !DILocation(line: 10, column: 17, scope: !25)
!29 = !DILocation(line: 10, column: 10, scope: !25)
!30 = !DILocation(line: 10, column: 3, scope: !25)
!31 = distinct !DISubprogram(name: "NFRMALLOC", scope: !15, file: !15, line: 13, type: !16, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!32 = !DILocalVariable(name: "n", arg: 1, scope: !31, file: !15, line: 13, type: !18)
!33 = !DILocation(line: 13, column: 21, scope: !31)
!34 = !DILocation(line: 14, column: 17, scope: !31)
!35 = !DILocation(line: 14, column: 10, scope: !31)
!36 = !DILocation(line: 14, column: 3, scope: !31)
!37 = distinct !DISubprogram(name: "CLKMALLOC", scope: !15, file: !15, line: 17, type: !16, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!38 = !DILocalVariable(name: "n", arg: 1, scope: !37, file: !15, line: 17, type: !18)
!39 = !DILocation(line: 17, column: 21, scope: !37)
!40 = !DILocation(line: 18, column: 17, scope: !37)
!41 = !DILocation(line: 18, column: 10, scope: !37)
!42 = !DILocation(line: 18, column: 3, scope: !37)
!43 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !15, file: !15, line: 21, type: !16, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!44 = !DILocalVariable(name: "n", arg: 1, scope: !43, file: !15, line: 21, type: !18)
!45 = !DILocation(line: 21, column: 21, scope: !43)
!46 = !DILocation(line: 22, column: 17, scope: !43)
!47 = !DILocation(line: 22, column: 10, scope: !43)
!48 = !DILocation(line: 22, column: 3, scope: !43)
!49 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !15, file: !15, line: 25, type: !16, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!50 = !DILocalVariable(name: "n", arg: 1, scope: !49, file: !15, line: 25, type: !18)
!51 = !DILocation(line: 25, column: 21, scope: !49)
!52 = !DILocation(line: 26, column: 17, scope: !49)
!53 = !DILocation(line: 26, column: 10, scope: !49)
!54 = !DILocation(line: 26, column: 3, scope: !49)
!55 = distinct !DISubprogram(name: "LEAKFN", scope: !15, file: !15, line: 29, type: !16, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!56 = !DILocalVariable(name: "n", arg: 1, scope: !55, file: !15, line: 29, type: !18)
!57 = !DILocation(line: 29, column: 18, scope: !55)
!58 = !DILocation(line: 30, column: 17, scope: !55)
!59 = !DILocation(line: 30, column: 10, scope: !55)
!60 = !DILocation(line: 30, column: 3, scope: !55)
!61 = distinct !DISubprogram(name: "alloc_matrix", scope: !62, file: !62, line: 11, type: !63, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!62 = !DIFile(filename: "src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ab5baec3e2f679f1cef0a9df2749a426")
!63 = !DISubroutineType(types: !64)
!64 = !{!6}
!65 = !DILocalVariable(name: "i", scope: !61, file: !62, line: 13, type: !18)
!66 = !DILocation(line: 13, column: 6, scope: !61)
!67 = !DILocalVariable(name: "cptr", scope: !61, file: !62, line: 13, type: !3)
!68 = !DILocation(line: 13, column: 16, scope: !61)
!69 = !DILocation(line: 14, column: 18, scope: !61)
!70 = !DILocation(line: 14, column: 7, scope: !61)
!71 = !DILocation(line: 15, column: 8, scope: !72)
!72 = distinct !DILexicalBlock(scope: !61, file: !62, line: 15, column: 2)
!73 = !DILocation(line: 15, column: 6, scope: !72)
!74 = !DILocation(line: 15, column: 13, scope: !75)
!75 = distinct !DILexicalBlock(scope: !72, file: !62, line: 15, column: 2)
!76 = !DILocation(line: 15, column: 15, scope: !75)
!77 = !DILocation(line: 15, column: 2, scope: !72)
!78 = !DILocation(line: 16, column: 21, scope: !79)
!79 = distinct !DILexicalBlock(scope: !75, file: !62, line: 15, column: 25)
!80 = !DILocation(line: 16, column: 3, scope: !79)
!81 = !DILocation(line: 16, column: 8, scope: !79)
!82 = !DILocation(line: 16, column: 11, scope: !79)
!83 = !DILocation(line: 17, column: 2, scope: !79)
!84 = !DILocation(line: 15, column: 22, scope: !75)
!85 = !DILocation(line: 15, column: 2, scope: !75)
!86 = distinct !{!86, !77, !87, !88}
!87 = !DILocation(line: 17, column: 2, scope: !72)
!88 = !{!"llvm.loop.mustprogress"}
!89 = !DILocation(line: 19, column: 18, scope: !61)
!90 = !DILocation(line: 19, column: 2, scope: !61)
!91 = distinct !DISubprogram(name: "free_matrix", scope: !62, file: !62, line: 22, type: !92, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!92 = !DISubroutineType(types: !93)
!93 = !{null, !6}
!94 = !DILocalVariable(name: "matrix", arg: 1, scope: !91, file: !62, line: 22, type: !6)
!95 = !DILocation(line: 22, column: 26, scope: !91)
!96 = !DILocalVariable(name: "i", scope: !91, file: !62, line: 23, type: !18)
!97 = !DILocation(line: 23, column: 6, scope: !91)
!98 = !DILocation(line: 24, column: 8, scope: !99)
!99 = distinct !DILexicalBlock(scope: !91, file: !62, line: 24, column: 2)
!100 = !DILocation(line: 24, column: 6, scope: !99)
!101 = !DILocation(line: 24, column: 13, scope: !102)
!102 = distinct !DILexicalBlock(scope: !99, file: !62, line: 24, column: 2)
!103 = !DILocation(line: 24, column: 15, scope: !102)
!104 = !DILocation(line: 24, column: 2, scope: !99)
!105 = !DILocation(line: 25, column: 8, scope: !106)
!106 = distinct !DILexicalBlock(scope: !102, file: !62, line: 24, column: 25)
!107 = !DILocation(line: 25, column: 15, scope: !106)
!108 = !DILocation(line: 25, column: 3, scope: !106)
!109 = !DILocation(line: 26, column: 2, scope: !106)
!110 = !DILocation(line: 24, column: 22, scope: !102)
!111 = !DILocation(line: 24, column: 2, scope: !102)
!112 = distinct !{!112, !104, !113, !88}
!113 = !DILocation(line: 26, column: 2, scope: !99)
!114 = !DILocation(line: 27, column: 7, scope: !91)
!115 = !DILocation(line: 27, column: 2, scope: !91)
!116 = !DILocation(line: 29, column: 1, scope: !91)
!117 = distinct !DISubprogram(name: "main", scope: !62, file: !62, line: 31, type: !118, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!118 = !DISubroutineType(types: !119)
!119 = !{!18}
!120 = !DILocalVariable(name: "dir_list", scope: !117, file: !62, line: 34, type: !3)
!121 = !DILocation(line: 34, column: 11, scope: !117)
!122 = !DILocation(line: 35, column: 23, scope: !117)
!123 = !DILocation(line: 35, column: 13, scope: !117)
!124 = !DILocation(line: 36, column: 16, scope: !117)
!125 = !DILocation(line: 36, column: 4, scope: !117)
!126 = !DILocation(line: 38, column: 1, scope: !117)
