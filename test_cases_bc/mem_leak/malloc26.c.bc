; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc26.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !15 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load i32, i32* %n.addr, align 4, !dbg !22
  %conv = sext i32 %0 to i64, !dbg !22
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !23
  ret i8* %call, !dbg !24
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !25 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %0 = load i32, i32* %n.addr, align 4, !dbg !28
  %conv = sext i32 %0 to i64, !dbg !28
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !29
  ret i8* %call, !dbg !30
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !31 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !32, metadata !DIExpression()), !dbg !33
  %0 = load i32, i32* %n.addr, align 4, !dbg !34
  %conv = sext i32 %0 to i64, !dbg !34
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !35
  ret i8* %call, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !37 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %0 = load i32, i32* %n.addr, align 4, !dbg !40
  %conv = sext i32 %0 to i64, !dbg !40
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !41
  ret i8* %call, !dbg !42
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !43 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !44, metadata !DIExpression()), !dbg !45
  %0 = load i32, i32* %n.addr, align 4, !dbg !46
  %conv = sext i32 %0 to i64, !dbg !46
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !47
  ret i8* %call, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !49 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %0 = load i32, i32* %n.addr, align 4, !dbg !52
  %conv = sext i32 %0 to i64, !dbg !52
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !53
  ret i8* %call, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !55 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %0 = load i32, i32* %n.addr, align 4, !dbg !58
  %conv = sext i32 %0 to i64, !dbg !58
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !59
  ret i8* %call, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8** @alloc_matrix() #0 !dbg !61 {
entry:
  %i = alloca i32, align 4
  %cptr = alloca i8**, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !65, metadata !DIExpression()), !dbg !66
  call void @llvm.dbg.declare(metadata i8*** %cptr, metadata !67, metadata !DIExpression()), !dbg !68
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !69
  %0 = bitcast i8* %call to i8**, !dbg !70
  store i8** %0, i8*** %cptr, align 8, !dbg !71
  store i32 0, i32* %i, align 4, !dbg !72
  br label %for.cond, !dbg !74

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !75
  %cmp = icmp slt i32 %1, 10, !dbg !77
  br i1 %cmp, label %for.body, label %for.end, !dbg !78

for.body:                                         ; preds = %for.cond
  %call1 = call i8* @PLKLEAKFP(i32 1), !dbg !79
  %2 = load i8**, i8*** %cptr, align 8, !dbg !81
  %3 = load i32, i32* %i, align 4, !dbg !82
  %idxprom = sext i32 %3 to i64, !dbg !81
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom, !dbg !81
  store i8* %call1, i8** %arrayidx, align 8, !dbg !83
  br label %for.inc, !dbg !84

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !85
  %inc = add nsw i32 %4, 1, !dbg !85
  store i32 %inc, i32* %i, align 4, !dbg !85
  br label %for.cond, !dbg !86, !llvm.loop !87

for.end:                                          ; preds = %for.cond
  %5 = load i8**, i8*** %cptr, align 8, !dbg !90
  ret i8** %5, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_matrix(i8** %matrix) #0 !dbg !92 {
entry:
  %matrix.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store i8** %matrix, i8*** %matrix.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %matrix.addr, metadata !95, metadata !DIExpression()), !dbg !96
  call void @llvm.dbg.declare(metadata i32* %i, metadata !97, metadata !DIExpression()), !dbg !98
  store i32 0, i32* %i, align 4, !dbg !99
  br label %for.cond, !dbg !101

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !102
  %cmp = icmp slt i32 %0, 10, !dbg !104
  br i1 %cmp, label %for.body, label %for.end, !dbg !105

for.body:                                         ; preds = %for.cond
  %1 = load i8**, i8*** %matrix.addr, align 8, !dbg !106
  %2 = load i32, i32* %i, align 4, !dbg !108
  %idxprom = sext i32 %2 to i64, !dbg !106
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %idxprom, !dbg !106
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !106
  call void @free(i8* %3) #3, !dbg !109
  br label %for.inc, !dbg !110

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !111
  %inc = add nsw i32 %4, 1, !dbg !111
  store i32 %inc, i32* %i, align 4, !dbg !111
  br label %for.cond, !dbg !112, !llvm.loop !113

for.end:                                          ; preds = %for.cond
  %5 = load i8**, i8*** %matrix.addr, align 8, !dbg !115
  %6 = bitcast i8** %5 to i8*, !dbg !115
  call void @free(i8* %6) #3, !dbg !116
  ret void, !dbg !117
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !118 {
entry:
  %dir_list = alloca i8**, align 8
  call void @llvm.dbg.declare(metadata i8*** %dir_list, metadata !121, metadata !DIExpression()), !dbg !122
  %call = call i8** @alloc_matrix(), !dbg !123
  store i8** %call, i8*** %dir_list, align 8, !dbg !124
  %0 = load i8**, i8*** %dir_list, align 8, !dbg !125
  call void @free_matrix(i8** %0), !dbg !126
  ret i32 0, !dbg !127
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4, !5, !7}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!6 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !{i32 7, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{i32 7, !"uwtable", i32 1}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 13.0.0"}
!15 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !16, file: !16, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!16 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!17 = !DISubroutineType(types: !18)
!18 = !{!8, !19}
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DILocalVariable(name: "n", arg: 1, scope: !15, file: !16, line: 5, type: !19)
!21 = !DILocation(line: 5, column: 22, scope: !15)
!22 = !DILocation(line: 6, column: 17, scope: !15)
!23 = !DILocation(line: 6, column: 10, scope: !15)
!24 = !DILocation(line: 6, column: 3, scope: !15)
!25 = distinct !DISubprogram(name: "PLKMALLOC", scope: !16, file: !16, line: 9, type: !17, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!26 = !DILocalVariable(name: "n", arg: 1, scope: !25, file: !16, line: 9, type: !19)
!27 = !DILocation(line: 9, column: 21, scope: !25)
!28 = !DILocation(line: 10, column: 17, scope: !25)
!29 = !DILocation(line: 10, column: 10, scope: !25)
!30 = !DILocation(line: 10, column: 3, scope: !25)
!31 = distinct !DISubprogram(name: "NFRMALLOC", scope: !16, file: !16, line: 13, type: !17, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!32 = !DILocalVariable(name: "n", arg: 1, scope: !31, file: !16, line: 13, type: !19)
!33 = !DILocation(line: 13, column: 21, scope: !31)
!34 = !DILocation(line: 14, column: 17, scope: !31)
!35 = !DILocation(line: 14, column: 10, scope: !31)
!36 = !DILocation(line: 14, column: 3, scope: !31)
!37 = distinct !DISubprogram(name: "CLKMALLOC", scope: !16, file: !16, line: 17, type: !17, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!38 = !DILocalVariable(name: "n", arg: 1, scope: !37, file: !16, line: 17, type: !19)
!39 = !DILocation(line: 17, column: 21, scope: !37)
!40 = !DILocation(line: 18, column: 17, scope: !37)
!41 = !DILocation(line: 18, column: 10, scope: !37)
!42 = !DILocation(line: 18, column: 3, scope: !37)
!43 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !16, file: !16, line: 21, type: !17, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!44 = !DILocalVariable(name: "n", arg: 1, scope: !43, file: !16, line: 21, type: !19)
!45 = !DILocation(line: 21, column: 21, scope: !43)
!46 = !DILocation(line: 22, column: 17, scope: !43)
!47 = !DILocation(line: 22, column: 10, scope: !43)
!48 = !DILocation(line: 22, column: 3, scope: !43)
!49 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !16, file: !16, line: 25, type: !17, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!50 = !DILocalVariable(name: "n", arg: 1, scope: !49, file: !16, line: 25, type: !19)
!51 = !DILocation(line: 25, column: 21, scope: !49)
!52 = !DILocation(line: 26, column: 17, scope: !49)
!53 = !DILocation(line: 26, column: 10, scope: !49)
!54 = !DILocation(line: 26, column: 3, scope: !49)
!55 = distinct !DISubprogram(name: "LEAKFN", scope: !16, file: !16, line: 29, type: !17, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!56 = !DILocalVariable(name: "n", arg: 1, scope: !55, file: !16, line: 29, type: !19)
!57 = !DILocation(line: 29, column: 18, scope: !55)
!58 = !DILocation(line: 30, column: 17, scope: !55)
!59 = !DILocation(line: 30, column: 10, scope: !55)
!60 = !DILocation(line: 30, column: 3, scope: !55)
!61 = distinct !DISubprogram(name: "alloc_matrix", scope: !62, file: !62, line: 11, type: !63, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!62 = !DIFile(filename: "src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!63 = !DISubroutineType(types: !64)
!64 = !{!7}
!65 = !DILocalVariable(name: "i", scope: !61, file: !62, line: 13, type: !19)
!66 = !DILocation(line: 13, column: 6, scope: !61)
!67 = !DILocalVariable(name: "cptr", scope: !61, file: !62, line: 13, type: !4)
!68 = !DILocation(line: 13, column: 16, scope: !61)
!69 = !DILocation(line: 14, column: 18, scope: !61)
!70 = !DILocation(line: 14, column: 9, scope: !61)
!71 = !DILocation(line: 14, column: 7, scope: !61)
!72 = !DILocation(line: 15, column: 8, scope: !73)
!73 = distinct !DILexicalBlock(scope: !61, file: !62, line: 15, column: 2)
!74 = !DILocation(line: 15, column: 6, scope: !73)
!75 = !DILocation(line: 15, column: 13, scope: !76)
!76 = distinct !DILexicalBlock(scope: !73, file: !62, line: 15, column: 2)
!77 = !DILocation(line: 15, column: 15, scope: !76)
!78 = !DILocation(line: 15, column: 2, scope: !73)
!79 = !DILocation(line: 16, column: 21, scope: !80)
!80 = distinct !DILexicalBlock(scope: !76, file: !62, line: 15, column: 25)
!81 = !DILocation(line: 16, column: 3, scope: !80)
!82 = !DILocation(line: 16, column: 8, scope: !80)
!83 = !DILocation(line: 16, column: 11, scope: !80)
!84 = !DILocation(line: 17, column: 2, scope: !80)
!85 = !DILocation(line: 15, column: 22, scope: !76)
!86 = !DILocation(line: 15, column: 2, scope: !76)
!87 = distinct !{!87, !78, !88, !89}
!88 = !DILocation(line: 17, column: 2, scope: !73)
!89 = !{!"llvm.loop.mustprogress"}
!90 = !DILocation(line: 19, column: 18, scope: !61)
!91 = !DILocation(line: 19, column: 2, scope: !61)
!92 = distinct !DISubprogram(name: "free_matrix", scope: !62, file: !62, line: 22, type: !93, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!93 = !DISubroutineType(types: !94)
!94 = !{null, !7}
!95 = !DILocalVariable(name: "matrix", arg: 1, scope: !92, file: !62, line: 22, type: !7)
!96 = !DILocation(line: 22, column: 26, scope: !92)
!97 = !DILocalVariable(name: "i", scope: !92, file: !62, line: 23, type: !19)
!98 = !DILocation(line: 23, column: 6, scope: !92)
!99 = !DILocation(line: 24, column: 8, scope: !100)
!100 = distinct !DILexicalBlock(scope: !92, file: !62, line: 24, column: 2)
!101 = !DILocation(line: 24, column: 6, scope: !100)
!102 = !DILocation(line: 24, column: 13, scope: !103)
!103 = distinct !DILexicalBlock(scope: !100, file: !62, line: 24, column: 2)
!104 = !DILocation(line: 24, column: 15, scope: !103)
!105 = !DILocation(line: 24, column: 2, scope: !100)
!106 = !DILocation(line: 25, column: 8, scope: !107)
!107 = distinct !DILexicalBlock(scope: !103, file: !62, line: 24, column: 25)
!108 = !DILocation(line: 25, column: 15, scope: !107)
!109 = !DILocation(line: 25, column: 3, scope: !107)
!110 = !DILocation(line: 26, column: 2, scope: !107)
!111 = !DILocation(line: 24, column: 22, scope: !103)
!112 = !DILocation(line: 24, column: 2, scope: !103)
!113 = distinct !{!113, !105, !114, !89}
!114 = !DILocation(line: 26, column: 2, scope: !100)
!115 = !DILocation(line: 27, column: 7, scope: !92)
!116 = !DILocation(line: 27, column: 2, scope: !92)
!117 = !DILocation(line: 29, column: 1, scope: !92)
!118 = distinct !DISubprogram(name: "main", scope: !62, file: !62, line: 31, type: !119, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!119 = !DISubroutineType(types: !120)
!120 = !{!19}
!121 = !DILocalVariable(name: "dir_list", scope: !118, file: !62, line: 34, type: !4)
!122 = !DILocation(line: 34, column: 11, scope: !118)
!123 = !DILocation(line: 35, column: 23, scope: !118)
!124 = !DILocation(line: 35, column: 13, scope: !118)
!125 = !DILocation(line: 36, column: 16, scope: !118)
!126 = !DILocation(line: 36, column: 4, scope: !118)
!127 = !DILocation(line: 38, column: 1, scope: !118)
