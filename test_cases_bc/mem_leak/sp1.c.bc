; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp1.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.ResourceLeak_TC01.str = private unnamed_addr constant [10 x i8] c"STRING\00\00\00\00", align 1
@.str = private unnamed_addr constant [6 x i8] c" %s \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !10 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, ptr %n.addr, align 4, !dbg !18
  %conv = sext i32 %0 to i64, !dbg !18
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !19
  ret ptr %call, !dbg !20
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !21 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32, ptr %n.addr, align 4, !dbg !24
  %conv = sext i32 %0 to i64, !dbg !24
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !25
  ret ptr %call, !dbg !26
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !27 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %0 = load i32, ptr %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !31
  ret ptr %call, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, ptr %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !37
  ret ptr %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load i32, ptr %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !43
  ret ptr %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, ptr %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !49
  ret ptr %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %0 = load i32, ptr %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !55
  ret ptr %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ResourceLeak_TC01(ptr noundef %p) #0 !dbg !57 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca ptr, align 8
  %str = alloca [10 x i8], align 1
  store ptr %p, ptr %p.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  call void @llvm.dbg.declare(metadata ptr %str, metadata !64, metadata !DIExpression()), !dbg !69
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %str, ptr align 1 @__const.ResourceLeak_TC01.str, i64 10, i1 false), !dbg !69
  %0 = load ptr, ptr %p.addr, align 8, !dbg !70
  %cmp = icmp eq ptr %0, null, !dbg !72
  br i1 %cmp, label %if.then, label %if.end, !dbg !73

if.then:                                          ; preds = %entry
  store i32 -1, ptr %retval, align 4, !dbg !74
  br label %return, !dbg !74

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %p.addr, align 8, !dbg !75
  %arraydecay = getelementptr inbounds [10 x i8], ptr %str, i64 0, i64 0, !dbg !76
  %call = call ptr @strcat(ptr noundef %1, ptr noundef %arraydecay), !dbg !77
  %2 = load ptr, ptr %p.addr, align 8, !dbg !78
  %call1 = call i32 (ptr, ...) @printf(ptr noundef getelementptr inbounds ([6 x i8], ptr @.str, i64 0, i64 0), ptr noundef %2), !dbg !79
  %3 = load ptr, ptr %p.addr, align 8, !dbg !80
  call void @free(ptr noundef %3) #5, !dbg !81
  store i32 0, ptr %retval, align 4, !dbg !82
  br label %return, !dbg !82

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, ptr %retval, align 4, !dbg !83
  ret i32 %4, !dbg !83
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local ptr @strcat(ptr noundef, ptr noundef) #4

declare dso_local i32 @printf(ptr noundef, ...) #4

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !84 {
entry:
  %retval = alloca i32, align 4
  %p = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %p, metadata !87, metadata !DIExpression()), !dbg !89
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !90
  store ptr %call, ptr %p, align 8, !dbg !91
  %0 = load ptr, ptr %p, align 8, !dbg !92
  %call1 = call i32 @ResourceLeak_TC01(ptr noundef %0), !dbg !93
  ret i32 0, !dbg !94
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly nofree nounwind willreturn }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp1.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ea92a2c024e32eee5e212630b4e2a5e4")
!2 = !{!3}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!4 = !{i32 7, !"Dwarf Version", i32 5}
!5 = !{i32 2, !"Debug Info Version", i32 3}
!6 = !{i32 1, !"wchar_size", i32 4}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 14.0.0"}
!10 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !11, file: !11, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!12 = !DISubroutineType(types: !13)
!13 = !{!3, !14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "n", arg: 1, scope: !10, file: !11, line: 5, type: !14)
!17 = !DILocation(line: 5, column: 22, scope: !10)
!18 = !DILocation(line: 6, column: 17, scope: !10)
!19 = !DILocation(line: 6, column: 10, scope: !10)
!20 = !DILocation(line: 6, column: 3, scope: !10)
!21 = distinct !DISubprogram(name: "PLKMALLOC", scope: !11, file: !11, line: 9, type: !12, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!22 = !DILocalVariable(name: "n", arg: 1, scope: !21, file: !11, line: 9, type: !14)
!23 = !DILocation(line: 9, column: 21, scope: !21)
!24 = !DILocation(line: 10, column: 17, scope: !21)
!25 = !DILocation(line: 10, column: 10, scope: !21)
!26 = !DILocation(line: 10, column: 3, scope: !21)
!27 = distinct !DISubprogram(name: "NFRMALLOC", scope: !11, file: !11, line: 13, type: !12, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!28 = !DILocalVariable(name: "n", arg: 1, scope: !27, file: !11, line: 13, type: !14)
!29 = !DILocation(line: 13, column: 21, scope: !27)
!30 = !DILocation(line: 14, column: 17, scope: !27)
!31 = !DILocation(line: 14, column: 10, scope: !27)
!32 = !DILocation(line: 14, column: 3, scope: !27)
!33 = distinct !DISubprogram(name: "CLKMALLOC", scope: !11, file: !11, line: 17, type: !12, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !11, line: 17, type: !14)
!35 = !DILocation(line: 17, column: 21, scope: !33)
!36 = !DILocation(line: 18, column: 17, scope: !33)
!37 = !DILocation(line: 18, column: 10, scope: !33)
!38 = !DILocation(line: 18, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !11, file: !11, line: 21, type: !12, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !11, line: 21, type: !14)
!41 = !DILocation(line: 21, column: 21, scope: !39)
!42 = !DILocation(line: 22, column: 17, scope: !39)
!43 = !DILocation(line: 22, column: 10, scope: !39)
!44 = !DILocation(line: 22, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !11, file: !11, line: 25, type: !12, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !11, line: 25, type: !14)
!47 = !DILocation(line: 25, column: 21, scope: !45)
!48 = !DILocation(line: 26, column: 17, scope: !45)
!49 = !DILocation(line: 26, column: 10, scope: !45)
!50 = !DILocation(line: 26, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "LEAKFN", scope: !11, file: !11, line: 29, type: !12, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !11, line: 29, type: !14)
!53 = !DILocation(line: 29, column: 18, scope: !51)
!54 = !DILocation(line: 30, column: 17, scope: !51)
!55 = !DILocation(line: 30, column: 10, scope: !51)
!56 = !DILocation(line: 30, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "ResourceLeak_TC01", scope: !58, file: !58, line: 10, type: !59, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!58 = !DIFile(filename: "src/mem_leak/sp1.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ea92a2c024e32eee5e212630b4e2a5e4")
!59 = !DISubroutineType(types: !60)
!60 = !{!14, !61}
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!62 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !58, line: 10, type: !61)
!63 = !DILocation(line: 10, column: 28, scope: !57)
!64 = !DILocalVariable(name: "str", scope: !57, file: !58, line: 11, type: !65)
!65 = !DICompositeType(tag: DW_TAG_array_type, baseType: !66, size: 80, elements: !67)
!66 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!67 = !{!68}
!68 = !DISubrange(count: 10)
!69 = !DILocation(line: 11, column: 7, scope: !57)
!70 = !DILocation(line: 12, column: 6, scope: !71)
!71 = distinct !DILexicalBlock(scope: !57, file: !58, line: 12, column: 6)
!72 = !DILocation(line: 12, column: 8, scope: !71)
!73 = !DILocation(line: 12, column: 6, scope: !57)
!74 = !DILocation(line: 13, column: 3, scope: !71)
!75 = !DILocation(line: 15, column: 9, scope: !57)
!76 = !DILocation(line: 15, column: 12, scope: !57)
!77 = !DILocation(line: 15, column: 2, scope: !57)
!78 = !DILocation(line: 16, column: 19, scope: !57)
!79 = !DILocation(line: 16, column: 2, scope: !57)
!80 = !DILocation(line: 17, column: 7, scope: !57)
!81 = !DILocation(line: 17, column: 2, scope: !57)
!82 = !DILocation(line: 18, column: 2, scope: !57)
!83 = !DILocation(line: 19, column: 1, scope: !57)
!84 = distinct !DISubprogram(name: "main", scope: !58, file: !58, line: 21, type: !85, scopeLine: 21, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!85 = !DISubroutineType(types: !86)
!86 = !{!14}
!87 = !DILocalVariable(name: "p", scope: !84, file: !58, line: 22, type: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !66, size: 64)
!89 = !DILocation(line: 22, column: 8, scope: !84)
!90 = !DILocation(line: 23, column: 6, scope: !84)
!91 = !DILocation(line: 23, column: 4, scope: !84)
!92 = !DILocation(line: 24, column: 20, scope: !84)
!93 = !DILocation(line: 24, column: 2, scope: !84)
!94 = !DILocation(line: 25, column: 2, scope: !84)
