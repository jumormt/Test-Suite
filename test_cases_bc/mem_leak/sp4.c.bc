; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp4.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp4.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._S = type { ptr, ptr }

@__const.main.str1 = private unnamed_addr constant [10 x i8] c"STRING 1\00\00", align 1
@__const.main.str2 = private unnamed_addr constant [10 x i8] c"STRING 2\00\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !19 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load i32, ptr %n.addr, align 4, !dbg !27
  %conv = sext i32 %0 to i64, !dbg !27
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !28
  ret ptr %call, !dbg !29
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !30 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %0 = load i32, ptr %n.addr, align 4, !dbg !33
  %conv = sext i32 %0 to i64, !dbg !33
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !34
  ret ptr %call, !dbg !35
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !36 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %0 = load i32, ptr %n.addr, align 4, !dbg !39
  %conv = sext i32 %0 to i64, !dbg !39
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !40
  ret ptr %call, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !42 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %0 = load i32, ptr %n.addr, align 4, !dbg !45
  %conv = sext i32 %0 to i64, !dbg !45
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !46
  ret ptr %call, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !48 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %0 = load i32, ptr %n.addr, align 4, !dbg !51
  %conv = sext i32 %0 to i64, !dbg !51
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !52
  ret ptr %call, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !54 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %0 = load i32, ptr %n.addr, align 4, !dbg !57
  %conv = sext i32 %0 to i64, !dbg !57
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !58
  ret ptr %call, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %0 = load i32, ptr %n.addr, align 4, !dbg !63
  %conv = sext i32 %0 to i64, !dbg !63
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !64
  ret ptr %call, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %arg1) #0 !dbg !66 {
entry:
  %retval = alloca i32, align 4
  %arg1.addr = alloca i32, align 4
  %p = alloca ptr, align 8
  %str1 = alloca [10 x i8], align 1
  %str2 = alloca [10 x i8], align 1
  store i32 0, ptr %retval, align 4
  store i32 %arg1, ptr %arg1.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %arg1.addr, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata ptr %p, metadata !71, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.declare(metadata ptr %str1, metadata !73, metadata !DIExpression()), !dbg !77
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %str1, ptr align 1 @__const.main.str1, i64 10, i1 false), !dbg !77
  call void @llvm.dbg.declare(metadata ptr %str2, metadata !78, metadata !DIExpression()), !dbg !79
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %str2, ptr align 1 @__const.main.str2, i64 10, i1 false), !dbg !79
  %call = call ptr @SAFEMALLOC(i32 noundef 16), !dbg !80
  store ptr %call, ptr %p, align 8, !dbg !81
  %0 = load ptr, ptr %p, align 8, !dbg !82
  %cmp = icmp eq ptr %0, null, !dbg !84
  br i1 %cmp, label %if.then, label %if.end, !dbg !85

if.then:                                          ; preds = %entry
  store i32 -1, ptr %retval, align 4, !dbg !86
  br label %return, !dbg !86

if.end:                                           ; preds = %entry
  %call1 = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !87
  %1 = load ptr, ptr %p, align 8, !dbg !88
  %p1 = getelementptr inbounds %struct._S, ptr %1, i32 0, i32 0, !dbg !89
  store ptr %call1, ptr %p1, align 8, !dbg !90
  %2 = load ptr, ptr %p, align 8, !dbg !91
  %p12 = getelementptr inbounds %struct._S, ptr %2, i32 0, i32 0, !dbg !93
  %3 = load ptr, ptr %p12, align 8, !dbg !93
  %cmp3 = icmp eq ptr %3, null, !dbg !94
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !95

if.then4:                                         ; preds = %if.end
  %4 = load ptr, ptr %p, align 8, !dbg !96
  call void @free(ptr noundef %4) #5, !dbg !98
  store i32 -1, ptr %retval, align 4, !dbg !99
  br label %return, !dbg !99

if.end5:                                          ; preds = %if.end
  %5 = load ptr, ptr %p, align 8, !dbg !100
  %p16 = getelementptr inbounds %struct._S, ptr %5, i32 0, i32 0, !dbg !101
  %6 = load ptr, ptr %p16, align 8, !dbg !101
  %arraydecay = getelementptr inbounds [10 x i8], ptr %str1, i64 0, i64 0, !dbg !102
  %call7 = call ptr @strcpy(ptr noundef %6, ptr noundef %arraydecay), !dbg !103
  %7 = load ptr, ptr %p, align 8, !dbg !104
  %p2 = getelementptr inbounds %struct._S, ptr %7, i32 0, i32 1, !dbg !105
  %8 = load ptr, ptr %p2, align 8, !dbg !105
  %arraydecay8 = getelementptr inbounds [10 x i8], ptr %str2, i64 0, i64 0, !dbg !106
  %call9 = call ptr @strcpy(ptr noundef %8, ptr noundef %arraydecay8), !dbg !107
  %9 = load ptr, ptr %p, align 8, !dbg !108
  %p110 = getelementptr inbounds %struct._S, ptr %9, i32 0, i32 0, !dbg !109
  %10 = load ptr, ptr %p110, align 8, !dbg !109
  call void @free(ptr noundef %10) #5, !dbg !110
  %11 = load ptr, ptr %p, align 8, !dbg !111
  %p211 = getelementptr inbounds %struct._S, ptr %11, i32 0, i32 1, !dbg !112
  %12 = load ptr, ptr %p211, align 8, !dbg !112
  call void @free(ptr noundef %12) #5, !dbg !113
  %13 = load ptr, ptr %p, align 8, !dbg !114
  call void @free(ptr noundef %13) #5, !dbg !115
  %14 = load i32, ptr %arg1.addr, align 4, !dbg !116
  store i32 %14, ptr %retval, align 4, !dbg !117
  br label %return, !dbg !117

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %15 = load i32, ptr %retval, align 4, !dbg !118
  ret i32 %15, !dbg !118
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

declare dso_local ptr @strcpy(ptr noundef, ptr noundef) #4

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly nofree nounwind willreturn }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!13, !14, !15, !16, !17}
!llvm.ident = !{!18}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp4.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "dab39dcd927272e2fe8871c0da781b03")
!2 = !{!3, !12, !9}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "S", file: !5, line: 15, baseType: !6)
!5 = !DIFile(filename: "src/mem_leak/sp4.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "dab39dcd927272e2fe8871c0da781b03")
!6 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_S", file: !5, line: 12, size: 128, elements: !7)
!7 = !{!8, !11}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "p1", scope: !6, file: !5, line: 13, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "p2", scope: !6, file: !5, line: 14, baseType: !9, size: 64, offset: 64)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!13 = !{i32 7, !"Dwarf Version", i32 5}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 7, !"uwtable", i32 1}
!17 = !{i32 7, !"frame-pointer", i32 2}
!18 = !{!"clang version 14.0.0"}
!19 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !20, file: !20, line: 5, type: !21, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!20 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!21 = !DISubroutineType(types: !22)
!22 = !{!12, !23}
!23 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!24 = !{}
!25 = !DILocalVariable(name: "n", arg: 1, scope: !19, file: !20, line: 5, type: !23)
!26 = !DILocation(line: 5, column: 22, scope: !19)
!27 = !DILocation(line: 6, column: 17, scope: !19)
!28 = !DILocation(line: 6, column: 10, scope: !19)
!29 = !DILocation(line: 6, column: 3, scope: !19)
!30 = distinct !DISubprogram(name: "PLKMALLOC", scope: !20, file: !20, line: 9, type: !21, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!31 = !DILocalVariable(name: "n", arg: 1, scope: !30, file: !20, line: 9, type: !23)
!32 = !DILocation(line: 9, column: 21, scope: !30)
!33 = !DILocation(line: 10, column: 17, scope: !30)
!34 = !DILocation(line: 10, column: 10, scope: !30)
!35 = !DILocation(line: 10, column: 3, scope: !30)
!36 = distinct !DISubprogram(name: "NFRMALLOC", scope: !20, file: !20, line: 13, type: !21, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!37 = !DILocalVariable(name: "n", arg: 1, scope: !36, file: !20, line: 13, type: !23)
!38 = !DILocation(line: 13, column: 21, scope: !36)
!39 = !DILocation(line: 14, column: 17, scope: !36)
!40 = !DILocation(line: 14, column: 10, scope: !36)
!41 = !DILocation(line: 14, column: 3, scope: !36)
!42 = distinct !DISubprogram(name: "CLKMALLOC", scope: !20, file: !20, line: 17, type: !21, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!43 = !DILocalVariable(name: "n", arg: 1, scope: !42, file: !20, line: 17, type: !23)
!44 = !DILocation(line: 17, column: 21, scope: !42)
!45 = !DILocation(line: 18, column: 17, scope: !42)
!46 = !DILocation(line: 18, column: 10, scope: !42)
!47 = !DILocation(line: 18, column: 3, scope: !42)
!48 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !20, file: !20, line: 21, type: !21, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!49 = !DILocalVariable(name: "n", arg: 1, scope: !48, file: !20, line: 21, type: !23)
!50 = !DILocation(line: 21, column: 21, scope: !48)
!51 = !DILocation(line: 22, column: 17, scope: !48)
!52 = !DILocation(line: 22, column: 10, scope: !48)
!53 = !DILocation(line: 22, column: 3, scope: !48)
!54 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !20, file: !20, line: 25, type: !21, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!55 = !DILocalVariable(name: "n", arg: 1, scope: !54, file: !20, line: 25, type: !23)
!56 = !DILocation(line: 25, column: 21, scope: !54)
!57 = !DILocation(line: 26, column: 17, scope: !54)
!58 = !DILocation(line: 26, column: 10, scope: !54)
!59 = !DILocation(line: 26, column: 3, scope: !54)
!60 = distinct !DISubprogram(name: "LEAKFN", scope: !20, file: !20, line: 29, type: !21, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!61 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !20, line: 29, type: !23)
!62 = !DILocation(line: 29, column: 18, scope: !60)
!63 = !DILocation(line: 30, column: 17, scope: !60)
!64 = !DILocation(line: 30, column: 10, scope: !60)
!65 = !DILocation(line: 30, column: 3, scope: !60)
!66 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 17, type: !67, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!67 = !DISubroutineType(types: !68)
!68 = !{!23, !23}
!69 = !DILocalVariable(name: "arg1", arg: 1, scope: !66, file: !5, line: 17, type: !23)
!70 = !DILocation(line: 17, column: 14, scope: !66)
!71 = !DILocalVariable(name: "p", scope: !66, file: !5, line: 19, type: !3)
!72 = !DILocation(line: 19, column: 5, scope: !66)
!73 = !DILocalVariable(name: "str1", scope: !66, file: !5, line: 20, type: !74)
!74 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 80, elements: !75)
!75 = !{!76}
!76 = !DISubrange(count: 10)
!77 = !DILocation(line: 20, column: 7, scope: !66)
!78 = !DILocalVariable(name: "str2", scope: !66, file: !5, line: 21, type: !74)
!79 = !DILocation(line: 21, column: 7, scope: !66)
!80 = !DILocation(line: 23, column: 10, scope: !66)
!81 = !DILocation(line: 23, column: 4, scope: !66)
!82 = !DILocation(line: 24, column: 6, scope: !83)
!83 = distinct !DILexicalBlock(scope: !66, file: !5, line: 24, column: 6)
!84 = !DILocation(line: 24, column: 8, scope: !83)
!85 = !DILocation(line: 24, column: 6, scope: !66)
!86 = !DILocation(line: 25, column: 4, scope: !83)
!87 = !DILocation(line: 27, column: 18, scope: !66)
!88 = !DILocation(line: 27, column: 2, scope: !66)
!89 = !DILocation(line: 27, column: 5, scope: !66)
!90 = !DILocation(line: 27, column: 8, scope: !66)
!91 = !DILocation(line: 28, column: 6, scope: !92)
!92 = distinct !DILexicalBlock(scope: !66, file: !5, line: 28, column: 6)
!93 = !DILocation(line: 28, column: 9, scope: !92)
!94 = !DILocation(line: 28, column: 12, scope: !92)
!95 = !DILocation(line: 28, column: 6, scope: !66)
!96 = !DILocation(line: 29, column: 9, scope: !97)
!97 = distinct !DILexicalBlock(scope: !92, file: !5, line: 28, column: 21)
!98 = !DILocation(line: 29, column: 4, scope: !97)
!99 = !DILocation(line: 30, column: 4, scope: !97)
!100 = !DILocation(line: 41, column: 10, scope: !66)
!101 = !DILocation(line: 41, column: 13, scope: !66)
!102 = !DILocation(line: 41, column: 17, scope: !66)
!103 = !DILocation(line: 41, column: 3, scope: !66)
!104 = !DILocation(line: 42, column: 10, scope: !66)
!105 = !DILocation(line: 42, column: 13, scope: !66)
!106 = !DILocation(line: 42, column: 17, scope: !66)
!107 = !DILocation(line: 42, column: 3, scope: !66)
!108 = !DILocation(line: 44, column: 8, scope: !66)
!109 = !DILocation(line: 44, column: 11, scope: !66)
!110 = !DILocation(line: 44, column: 3, scope: !66)
!111 = !DILocation(line: 45, column: 8, scope: !66)
!112 = !DILocation(line: 45, column: 11, scope: !66)
!113 = !DILocation(line: 45, column: 3, scope: !66)
!114 = !DILocation(line: 46, column: 8, scope: !66)
!115 = !DILocation(line: 46, column: 3, scope: !66)
!116 = !DILocation(line: 47, column: 10, scope: !66)
!117 = !DILocation(line: 47, column: 3, scope: !66)
!118 = !DILocation(line: 48, column: 1, scope: !66)
