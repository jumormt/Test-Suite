; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp15.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp15.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.List = type { %struct.List*, i32 }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !17 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32, i32* %n.addr, align 4, !dbg !24
  %conv = sext i32 %0 to i64, !dbg !24
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !25
  ret i8* %call, !dbg !26
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !27 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %0 = load i32, i32* %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !31
  ret i8* %call, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, i32* %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !37
  ret i8* %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load i32, i32* %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !43
  ret i8* %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, i32* %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !49
  ret i8* %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %0 = load i32, i32* %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !55
  ret i8* %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !57 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %0 = load i32, i32* %n.addr, align 4, !dbg !60
  %conv = sext i32 %0 to i64, !dbg !60
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !61
  ret i8* %call, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.List* @reverse(%struct.List* %x) #0 !dbg !63 {
entry:
  %x.addr = alloca %struct.List*, align 8
  %y = alloca %struct.List*, align 8
  %t = alloca %struct.List*, align 8
  store %struct.List* %x, %struct.List** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %x.addr, metadata !66, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.declare(metadata %struct.List** %y, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.declare(metadata %struct.List** %t, metadata !70, metadata !DIExpression()), !dbg !71
  %0 = load %struct.List*, %struct.List** %x.addr, align 8, !dbg !72
  %next = getelementptr inbounds %struct.List, %struct.List* %0, i32 0, i32 0, !dbg !73
  %1 = load %struct.List*, %struct.List** %next, align 8, !dbg !73
  store %struct.List* %1, %struct.List** %y, align 8, !dbg !74
  %2 = load %struct.List*, %struct.List** %x.addr, align 8, !dbg !75
  %3 = bitcast %struct.List* %2 to i8*, !dbg !75
  call void @free(i8* %3) #3, !dbg !76
  %4 = load %struct.List*, %struct.List** %y, align 8, !dbg !77
  store %struct.List* %4, %struct.List** %x.addr, align 8, !dbg !78
  br label %while.cond, !dbg !79

while.cond:                                       ; preds = %while.body, %entry
  %5 = load %struct.List*, %struct.List** %x.addr, align 8, !dbg !80
  %cmp = icmp ne %struct.List* %5, null, !dbg !81
  br i1 %cmp, label %while.body, label %while.end, !dbg !79

while.body:                                       ; preds = %while.cond
  %6 = load %struct.List*, %struct.List** %x.addr, align 8, !dbg !82
  %next1 = getelementptr inbounds %struct.List, %struct.List* %6, i32 0, i32 0, !dbg !84
  %7 = load %struct.List*, %struct.List** %next1, align 8, !dbg !84
  store %struct.List* %7, %struct.List** %t, align 8, !dbg !85
  %8 = load %struct.List*, %struct.List** %y, align 8, !dbg !86
  %9 = load %struct.List*, %struct.List** %x.addr, align 8, !dbg !87
  %next2 = getelementptr inbounds %struct.List, %struct.List* %9, i32 0, i32 0, !dbg !88
  store %struct.List* %8, %struct.List** %next2, align 8, !dbg !89
  %10 = load %struct.List*, %struct.List** %x.addr, align 8, !dbg !90
  store %struct.List* %10, %struct.List** %y, align 8, !dbg !91
  %11 = load %struct.List*, %struct.List** %t, align 8, !dbg !92
  store %struct.List* %11, %struct.List** %x.addr, align 8, !dbg !93
  br label %while.cond, !dbg !79, !llvm.loop !94

while.end:                                        ; preds = %while.cond
  %call = call noalias align 16 i8* @malloc(i64 8) #3, !dbg !97
  %12 = bitcast i8* %call to %struct.List*, !dbg !98
  store %struct.List* %12, %struct.List** %t, align 8, !dbg !99
  %13 = load %struct.List*, %struct.List** %y, align 8, !dbg !100
  %14 = load %struct.List*, %struct.List** %t, align 8, !dbg !101
  %next3 = getelementptr inbounds %struct.List, %struct.List* %14, i32 0, i32 0, !dbg !102
  store %struct.List* %13, %struct.List** %next3, align 8, !dbg !103
  %15 = load %struct.List*, %struct.List** %t, align 8, !dbg !104
  ret %struct.List* %15, !dbg !105
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.List* @main() #0 !dbg !106 {
entry:
  %node = alloca %struct.List*, align 8
  %ret_val = alloca %struct.List*, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %node, metadata !108, metadata !DIExpression()), !dbg !109
  call void @llvm.dbg.declare(metadata %struct.List** %ret_val, metadata !110, metadata !DIExpression()), !dbg !111
  %call = call noalias align 16 i8* @malloc(i64 8) #3, !dbg !112
  %0 = bitcast i8* %call to %struct.List*, !dbg !113
  store %struct.List* %0, %struct.List** %node, align 8, !dbg !114
  %1 = load %struct.List*, %struct.List** %node, align 8, !dbg !115
  %call1 = call %struct.List* @reverse(%struct.List* %1), !dbg !116
  store %struct.List* %call1, %struct.List** %ret_val, align 8, !dbg !117
  %2 = load %struct.List*, %struct.List** %ret_val, align 8, !dbg !118
  %3 = bitcast %struct.List* %2 to i8*, !dbg !118
  call void @free(i8* %3) #3, !dbg !119
  %4 = load %struct.List*, %struct.List** %ret_val, align 8, !dbg !120
  %next = getelementptr inbounds %struct.List, %struct.List* %4, i32 0, i32 0, !dbg !121
  %5 = load %struct.List*, %struct.List** %next, align 8, !dbg !121
  %6 = bitcast %struct.List* %5 to i8*, !dbg !120
  call void @free(i8* %6) #3, !dbg !122
  %7 = load %struct.List*, %struct.List** %ret_val, align 8, !dbg !123
  ret %struct.List* %7, !dbg !124
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!11, !12, !13, !14, !15}
!llvm.ident = !{!16}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp15.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !6, line: 11, size: 128, elements: !7)
!6 = !DIFile(filename: "src/mem_leak/sp15.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !{!8, !9}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !5, file: !6, line: 12, baseType: !4, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !5, file: !6, line: 13, baseType: !10, size: 32, offset: 64)
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !{i32 7, !"Dwarf Version", i32 4}
!12 = !{i32 2, !"Debug Info Version", i32 3}
!13 = !{i32 1, !"wchar_size", i32 4}
!14 = !{i32 7, !"uwtable", i32 1}
!15 = !{i32 7, !"frame-pointer", i32 2}
!16 = !{!"clang version 13.0.0"}
!17 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !18, file: !18, line: 5, type: !19, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!18 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!19 = !DISubroutineType(types: !20)
!20 = !{!21, !10}
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!22 = !DILocalVariable(name: "n", arg: 1, scope: !17, file: !18, line: 5, type: !10)
!23 = !DILocation(line: 5, column: 22, scope: !17)
!24 = !DILocation(line: 6, column: 17, scope: !17)
!25 = !DILocation(line: 6, column: 10, scope: !17)
!26 = !DILocation(line: 6, column: 3, scope: !17)
!27 = distinct !DISubprogram(name: "PLKMALLOC", scope: !18, file: !18, line: 9, type: !19, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!28 = !DILocalVariable(name: "n", arg: 1, scope: !27, file: !18, line: 9, type: !10)
!29 = !DILocation(line: 9, column: 21, scope: !27)
!30 = !DILocation(line: 10, column: 17, scope: !27)
!31 = !DILocation(line: 10, column: 10, scope: !27)
!32 = !DILocation(line: 10, column: 3, scope: !27)
!33 = distinct !DISubprogram(name: "NFRMALLOC", scope: !18, file: !18, line: 13, type: !19, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !18, line: 13, type: !10)
!35 = !DILocation(line: 13, column: 21, scope: !33)
!36 = !DILocation(line: 14, column: 17, scope: !33)
!37 = !DILocation(line: 14, column: 10, scope: !33)
!38 = !DILocation(line: 14, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "CLKMALLOC", scope: !18, file: !18, line: 17, type: !19, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !18, line: 17, type: !10)
!41 = !DILocation(line: 17, column: 21, scope: !39)
!42 = !DILocation(line: 18, column: 17, scope: !39)
!43 = !DILocation(line: 18, column: 10, scope: !39)
!44 = !DILocation(line: 18, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !18, file: !18, line: 21, type: !19, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !18, line: 21, type: !10)
!47 = !DILocation(line: 21, column: 21, scope: !45)
!48 = !DILocation(line: 22, column: 17, scope: !45)
!49 = !DILocation(line: 22, column: 10, scope: !45)
!50 = !DILocation(line: 22, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !18, file: !18, line: 25, type: !19, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !18, line: 25, type: !10)
!53 = !DILocation(line: 25, column: 21, scope: !51)
!54 = !DILocation(line: 26, column: 17, scope: !51)
!55 = !DILocation(line: 26, column: 10, scope: !51)
!56 = !DILocation(line: 26, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "LEAKFN", scope: !18, file: !18, line: 29, type: !19, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!58 = !DILocalVariable(name: "n", arg: 1, scope: !57, file: !18, line: 29, type: !10)
!59 = !DILocation(line: 29, column: 18, scope: !57)
!60 = !DILocation(line: 30, column: 17, scope: !57)
!61 = !DILocation(line: 30, column: 10, scope: !57)
!62 = !DILocation(line: 30, column: 3, scope: !57)
!63 = distinct !DISubprogram(name: "reverse", scope: !6, file: !6, line: 16, type: !64, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!64 = !DISubroutineType(types: !65)
!65 = !{!4, !4}
!66 = !DILocalVariable(name: "x", arg: 1, scope: !63, file: !6, line: 16, type: !4)
!67 = !DILocation(line: 16, column: 35, scope: !63)
!68 = !DILocalVariable(name: "y", scope: !63, file: !6, line: 17, type: !4)
!69 = !DILocation(line: 17, column: 15, scope: !63)
!70 = !DILocalVariable(name: "t", scope: !63, file: !6, line: 17, type: !4)
!71 = !DILocation(line: 17, column: 19, scope: !63)
!72 = !DILocation(line: 18, column: 6, scope: !63)
!73 = !DILocation(line: 18, column: 9, scope: !63)
!74 = !DILocation(line: 18, column: 4, scope: !63)
!75 = !DILocation(line: 19, column: 7, scope: !63)
!76 = !DILocation(line: 19, column: 2, scope: !63)
!77 = !DILocation(line: 20, column: 6, scope: !63)
!78 = !DILocation(line: 20, column: 4, scope: !63)
!79 = !DILocation(line: 21, column: 2, scope: !63)
!80 = !DILocation(line: 21, column: 9, scope: !63)
!81 = !DILocation(line: 21, column: 11, scope: !63)
!82 = !DILocation(line: 22, column: 7, scope: !83)
!83 = distinct !DILexicalBlock(scope: !63, file: !6, line: 21, column: 17)
!84 = !DILocation(line: 22, column: 10, scope: !83)
!85 = !DILocation(line: 22, column: 5, scope: !83)
!86 = !DILocation(line: 23, column: 13, scope: !83)
!87 = !DILocation(line: 23, column: 3, scope: !83)
!88 = !DILocation(line: 23, column: 6, scope: !83)
!89 = !DILocation(line: 23, column: 11, scope: !83)
!90 = !DILocation(line: 24, column: 7, scope: !83)
!91 = !DILocation(line: 24, column: 5, scope: !83)
!92 = !DILocation(line: 25, column: 7, scope: !83)
!93 = !DILocation(line: 25, column: 5, scope: !83)
!94 = distinct !{!94, !79, !95, !96}
!95 = !DILocation(line: 26, column: 2, scope: !63)
!96 = !{!"llvm.loop.mustprogress"}
!97 = !DILocation(line: 27, column: 22, scope: !63)
!98 = !DILocation(line: 27, column: 6, scope: !63)
!99 = !DILocation(line: 27, column: 4, scope: !63)
!100 = !DILocation(line: 28, column: 12, scope: !63)
!101 = !DILocation(line: 28, column: 2, scope: !63)
!102 = !DILocation(line: 28, column: 5, scope: !63)
!103 = !DILocation(line: 28, column: 10, scope: !63)
!104 = !DILocation(line: 29, column: 9, scope: !63)
!105 = !DILocation(line: 29, column: 2, scope: !63)
!106 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 32, type: !107, scopeLine: 32, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!107 = !DISubroutineType(types: !3)
!108 = !DILocalVariable(name: "node", scope: !106, file: !6, line: 33, type: !4)
!109 = !DILocation(line: 33, column: 15, scope: !106)
!110 = !DILocalVariable(name: "ret_val", scope: !106, file: !6, line: 33, type: !4)
!111 = !DILocation(line: 33, column: 22, scope: !106)
!112 = !DILocation(line: 34, column: 25, scope: !106)
!113 = !DILocation(line: 34, column: 9, scope: !106)
!114 = !DILocation(line: 34, column: 7, scope: !106)
!115 = !DILocation(line: 35, column: 20, scope: !106)
!116 = !DILocation(line: 35, column: 12, scope: !106)
!117 = !DILocation(line: 35, column: 10, scope: !106)
!118 = !DILocation(line: 36, column: 7, scope: !106)
!119 = !DILocation(line: 36, column: 2, scope: !106)
!120 = !DILocation(line: 37, column: 7, scope: !106)
!121 = !DILocation(line: 37, column: 16, scope: !106)
!122 = !DILocation(line: 37, column: 2, scope: !106)
!123 = !DILocation(line: 38, column: 9, scope: !106)
!124 = !DILocation(line: 38, column: 2, scope: !106)
