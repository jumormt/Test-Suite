; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp6a.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6a.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._list = type { %struct._list* }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !16 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32, i32* %n.addr, align 4, !dbg !24
  %conv = sext i32 %0 to i64, !dbg !24
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !25
  ret i8* %call, !dbg !26
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !27 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %0 = load i32, i32* %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !31
  ret i8* %call, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, i32* %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !37
  ret i8* %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load i32, i32* %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !43
  ret i8* %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, i32* %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !49
  ret i8* %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %0 = load i32, i32* %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !55
  ret i8* %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !57 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %0 = load i32, i32* %n.addr, align 4, !dbg !60
  %conv = sext i32 %0 to i64, !dbg !60
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !61
  ret i8* %call, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct._list* @make_list(i32 %n) #0 !dbg !63 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %hd = alloca %struct._list*, align 8
  %p = alloca %struct._list*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !66, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.declare(metadata i32* %i, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.declare(metadata %struct._list** %hd, metadata !70, metadata !DIExpression()), !dbg !71
  %call = call i8* @SAFEMALLOC(i32 8), !dbg !72
  %0 = bitcast i8* %call to %struct._list*, !dbg !73
  store %struct._list* %0, %struct._list** %hd, align 8, !dbg !71
  call void @llvm.dbg.declare(metadata %struct._list** %p, metadata !74, metadata !DIExpression()), !dbg !75
  %1 = load %struct._list*, %struct._list** %hd, align 8, !dbg !76
  store %struct._list* %1, %struct._list** %p, align 8, !dbg !75
  store i32 0, i32* %i, align 4, !dbg !77
  br label %for.cond, !dbg !79

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !80
  %3 = load i32, i32* %n.addr, align 4, !dbg !82
  %cmp = icmp slt i32 %2, %3, !dbg !83
  br i1 %cmp, label %for.body, label %for.end, !dbg !84

for.body:                                         ; preds = %for.cond
  %call1 = call i8* @NFRMALLOC(i32 8), !dbg !85
  %4 = bitcast i8* %call1 to %struct._list*, !dbg !87
  %5 = load %struct._list*, %struct._list** %p, align 8, !dbg !88
  %next = getelementptr inbounds %struct._list, %struct._list* %5, i32 0, i32 0, !dbg !89
  store %struct._list* %4, %struct._list** %next, align 8, !dbg !90
  %6 = load %struct._list*, %struct._list** %p, align 8, !dbg !91
  %next2 = getelementptr inbounds %struct._list, %struct._list* %6, i32 0, i32 0, !dbg !92
  %7 = load %struct._list*, %struct._list** %next2, align 8, !dbg !92
  store %struct._list* %7, %struct._list** %p, align 8, !dbg !93
  br label %for.inc, !dbg !94

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !95
  %inc = add nsw i32 %8, 1, !dbg !95
  store i32 %inc, i32* %i, align 4, !dbg !95
  br label %for.cond, !dbg !96, !llvm.loop !97

for.end:                                          ; preds = %for.cond
  %9 = load %struct._list*, %struct._list** %p, align 8, !dbg !100
  %next3 = getelementptr inbounds %struct._list, %struct._list* %9, i32 0, i32 0, !dbg !101
  store %struct._list* null, %struct._list** %next3, align 8, !dbg !102
  %10 = load %struct._list*, %struct._list** %hd, align 8, !dbg !103
  ret %struct._list* %10, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_list(%struct._list* %hd) #0 !dbg !105 {
entry:
  %hd.addr = alloca %struct._list*, align 8
  store %struct._list* %hd, %struct._list** %hd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list** %hd.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %0 = load %struct._list*, %struct._list** %hd.addr, align 8, !dbg !110
  %1 = bitcast %struct._list* %0 to i8*, !dbg !110
  call void @free(i8* %1) #3, !dbg !111
  ret void, !dbg !112
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !113 {
entry:
  %l = alloca %struct._list*, align 8
  call void @llvm.dbg.declare(metadata %struct._list** %l, metadata !116, metadata !DIExpression()), !dbg !117
  %call = call %struct._list* @make_list(i32 10), !dbg !118
  store %struct._list* %call, %struct._list** %l, align 8, !dbg !117
  %0 = load %struct._list*, %struct._list** %l, align 8, !dbg !119
  call void @free_list(%struct._list* %0), !dbg !120
  ret void, !dbg !121
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!10, !11, !12, !13, !14}
!llvm.ident = !{!15}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "list", file: !5, line: 13, baseType: !6)
!5 = !DIFile(filename: "src/mem_leak/sp6a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_list", file: !5, line: 11, size: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7, file: !5, line: 12, baseType: !6, size: 64)
!10 = !{i32 7, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 7, !"uwtable", i32 1}
!14 = !{i32 7, !"frame-pointer", i32 2}
!15 = !{!"clang version 13.0.0"}
!16 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !17, file: !17, line: 5, type: !18, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!17 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!18 = !DISubroutineType(types: !19)
!19 = !{!20, !21}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!22 = !DILocalVariable(name: "n", arg: 1, scope: !16, file: !17, line: 5, type: !21)
!23 = !DILocation(line: 5, column: 22, scope: !16)
!24 = !DILocation(line: 6, column: 17, scope: !16)
!25 = !DILocation(line: 6, column: 10, scope: !16)
!26 = !DILocation(line: 6, column: 3, scope: !16)
!27 = distinct !DISubprogram(name: "PLKMALLOC", scope: !17, file: !17, line: 9, type: !18, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!28 = !DILocalVariable(name: "n", arg: 1, scope: !27, file: !17, line: 9, type: !21)
!29 = !DILocation(line: 9, column: 21, scope: !27)
!30 = !DILocation(line: 10, column: 17, scope: !27)
!31 = !DILocation(line: 10, column: 10, scope: !27)
!32 = !DILocation(line: 10, column: 3, scope: !27)
!33 = distinct !DISubprogram(name: "NFRMALLOC", scope: !17, file: !17, line: 13, type: !18, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !17, line: 13, type: !21)
!35 = !DILocation(line: 13, column: 21, scope: !33)
!36 = !DILocation(line: 14, column: 17, scope: !33)
!37 = !DILocation(line: 14, column: 10, scope: !33)
!38 = !DILocation(line: 14, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "CLKMALLOC", scope: !17, file: !17, line: 17, type: !18, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !17, line: 17, type: !21)
!41 = !DILocation(line: 17, column: 21, scope: !39)
!42 = !DILocation(line: 18, column: 17, scope: !39)
!43 = !DILocation(line: 18, column: 10, scope: !39)
!44 = !DILocation(line: 18, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !17, file: !17, line: 21, type: !18, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !17, line: 21, type: !21)
!47 = !DILocation(line: 21, column: 21, scope: !45)
!48 = !DILocation(line: 22, column: 17, scope: !45)
!49 = !DILocation(line: 22, column: 10, scope: !45)
!50 = !DILocation(line: 22, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !17, file: !17, line: 25, type: !18, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !17, line: 25, type: !21)
!53 = !DILocation(line: 25, column: 21, scope: !51)
!54 = !DILocation(line: 26, column: 17, scope: !51)
!55 = !DILocation(line: 26, column: 10, scope: !51)
!56 = !DILocation(line: 26, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "LEAKFN", scope: !17, file: !17, line: 29, type: !18, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!58 = !DILocalVariable(name: "n", arg: 1, scope: !57, file: !17, line: 29, type: !21)
!59 = !DILocation(line: 29, column: 18, scope: !57)
!60 = !DILocation(line: 30, column: 17, scope: !57)
!61 = !DILocation(line: 30, column: 10, scope: !57)
!62 = !DILocation(line: 30, column: 3, scope: !57)
!63 = distinct !DISubprogram(name: "make_list", scope: !5, file: !5, line: 15, type: !64, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!64 = !DISubroutineType(types: !65)
!65 = !{!4, !21}
!66 = !DILocalVariable(name: "n", arg: 1, scope: !63, file: !5, line: 15, type: !21)
!67 = !DILocation(line: 15, column: 20, scope: !63)
!68 = !DILocalVariable(name: "i", scope: !63, file: !5, line: 16, type: !21)
!69 = !DILocation(line: 16, column: 8, scope: !63)
!70 = !DILocalVariable(name: "hd", scope: !63, file: !5, line: 17, type: !4)
!71 = !DILocation(line: 17, column: 11, scope: !63)
!72 = !DILocation(line: 17, column: 22, scope: !63)
!73 = !DILocation(line: 17, column: 16, scope: !63)
!74 = !DILocalVariable(name: "p", scope: !63, file: !5, line: 18, type: !4)
!75 = !DILocation(line: 18, column: 10, scope: !63)
!76 = !DILocation(line: 18, column: 14, scope: !63)
!77 = !DILocation(line: 19, column: 13, scope: !78)
!78 = distinct !DILexicalBlock(scope: !63, file: !5, line: 19, column: 7)
!79 = !DILocation(line: 19, column: 12, scope: !78)
!80 = !DILocation(line: 19, column: 17, scope: !81)
!81 = distinct !DILexicalBlock(scope: !78, file: !5, line: 19, column: 7)
!82 = !DILocation(line: 19, column: 19, scope: !81)
!83 = !DILocation(line: 19, column: 18, scope: !81)
!84 = !DILocation(line: 19, column: 7, scope: !78)
!85 = !DILocation(line: 20, column: 25, scope: !86)
!86 = distinct !DILexicalBlock(scope: !81, file: !5, line: 19, column: 27)
!87 = !DILocation(line: 20, column: 19, scope: !86)
!88 = !DILocation(line: 20, column: 9, scope: !86)
!89 = !DILocation(line: 20, column: 12, scope: !86)
!90 = !DILocation(line: 20, column: 17, scope: !86)
!91 = !DILocation(line: 21, column: 14, scope: !86)
!92 = !DILocation(line: 21, column: 17, scope: !86)
!93 = !DILocation(line: 21, column: 12, scope: !86)
!94 = !DILocation(line: 22, column: 9, scope: !86)
!95 = !DILocation(line: 19, column: 23, scope: !81)
!96 = !DILocation(line: 19, column: 7, scope: !81)
!97 = distinct !{!97, !84, !98, !99}
!98 = !DILocation(line: 22, column: 9, scope: !78)
!99 = !{!"llvm.loop.mustprogress"}
!100 = !DILocation(line: 23, column: 6, scope: !63)
!101 = !DILocation(line: 23, column: 9, scope: !63)
!102 = !DILocation(line: 23, column: 14, scope: !63)
!103 = !DILocation(line: 24, column: 15, scope: !63)
!104 = !DILocation(line: 24, column: 8, scope: !63)
!105 = distinct !DISubprogram(name: "free_list", scope: !5, file: !5, line: 27, type: !106, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!106 = !DISubroutineType(types: !107)
!107 = !{null, !4}
!108 = !DILocalVariable(name: "hd", arg: 1, scope: !105, file: !5, line: 27, type: !4)
!109 = !DILocation(line: 27, column: 21, scope: !105)
!110 = !DILocation(line: 28, column: 11, scope: !105)
!111 = !DILocation(line: 28, column: 6, scope: !105)
!112 = !DILocation(line: 29, column: 1, scope: !105)
!113 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 31, type: !114, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!114 = !DISubroutineType(types: !115)
!115 = !{null}
!116 = !DILocalVariable(name: "l", scope: !113, file: !5, line: 32, type: !4)
!117 = !DILocation(line: 32, column: 11, scope: !113)
!118 = !DILocation(line: 32, column: 15, scope: !113)
!119 = !DILocation(line: 33, column: 17, scope: !113)
!120 = !DILocation(line: 33, column: 7, scope: !113)
!121 = !DILocation(line: 34, column: 1, scope: !113)
