; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp9.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp9.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !12 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !18, metadata !DIExpression()), !dbg !19
  %0 = load i32, ptr %n.addr, align 4, !dbg !20
  %conv = sext i32 %0 to i64, !dbg !20
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !21
  ret ptr %call, !dbg !22
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !23 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i32, ptr %n.addr, align 4, !dbg !26
  %conv = sext i32 %0 to i64, !dbg !26
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !27
  ret ptr %call, !dbg !28
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !29 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i32, ptr %n.addr, align 4, !dbg !32
  %conv = sext i32 %0 to i64, !dbg !32
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !33
  ret ptr %call, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !35 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %0 = load i32, ptr %n.addr, align 4, !dbg !38
  %conv = sext i32 %0 to i64, !dbg !38
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !39
  ret ptr %call, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !41 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %0 = load i32, ptr %n.addr, align 4, !dbg !44
  %conv = sext i32 %0 to i64, !dbg !44
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !45
  ret ptr %call, !dbg !46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !47 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %0 = load i32, ptr %n.addr, align 4, !dbg !50
  %conv = sext i32 %0 to i64, !dbg !50
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !51
  ret ptr %call, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !53 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %0 = load i32, ptr %n.addr, align 4, !dbg !56
  %conv = sext i32 %0 to i64, !dbg !56
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !57
  ret ptr %call, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sum(ptr noundef %s) #0 !dbg !59 {
entry:
  %s.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i32, align 4
  %n = alloca i32, align 4
  store ptr %s, ptr %s.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %s.addr, metadata !63, metadata !DIExpression()), !dbg !64
  call void @llvm.dbg.declare(metadata ptr %p, metadata !65, metadata !DIExpression()), !dbg !66
  call void @llvm.dbg.declare(metadata ptr %i, metadata !67, metadata !DIExpression()), !dbg !68
  store i32 0, ptr %i, align 4, !dbg !68
  call void @llvm.dbg.declare(metadata ptr %j, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata ptr %r, metadata !71, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.declare(metadata ptr %n, metadata !73, metadata !DIExpression()), !dbg !74
  %0 = load ptr, ptr %s.addr, align 8, !dbg !75
  %cmp = icmp eq ptr %0, null, !dbg !76
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !75

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !75

cond.false:                                       ; preds = %entry
  %1 = load ptr, ptr %s.addr, align 8, !dbg !77
  %call = call i64 @strlen(ptr noundef %1), !dbg !78
  br label %cond.end, !dbg !75

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %call, %cond.false ], !dbg !75
  %conv = trunc i64 %cond to i32, !dbg !79
  store i32 %conv, ptr %n, align 4, !dbg !74
  %2 = load i32, ptr %n, align 4, !dbg !80
  %cmp1 = icmp sgt i32 %2, 0, !dbg !82
  br i1 %cmp1, label %if.then, label %if.else, !dbg !83

if.then:                                          ; preds = %cond.end
  %3 = load i32, ptr %n, align 4, !dbg !84
  %call3 = call ptr @PLKMALLOC(i32 noundef %3), !dbg !86
  store ptr %call3, ptr %p, align 8, !dbg !87
  store i32 0, ptr %r, align 4, !dbg !88
  br label %if.end, !dbg !89

if.else:                                          ; preds = %cond.end
  store i32 -1, ptr %r, align 4, !dbg !90
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond, !dbg !91

while.cond:                                       ; preds = %if.end22, %if.end
  %4 = load i32, ptr %i, align 4, !dbg !92
  %5 = load i32, ptr %n, align 4, !dbg !93
  %cmp4 = icmp slt i32 %4, %5, !dbg !94
  br i1 %cmp4, label %while.body, label %while.end24, !dbg !91

while.body:                                       ; preds = %while.cond
  store i32 0, ptr %j, align 4, !dbg !95
  br label %while.cond6, !dbg !97

while.cond6:                                      ; preds = %while.body10, %while.body
  %6 = load ptr, ptr %s.addr, align 8, !dbg !98
  %7 = load i32, ptr %i, align 4, !dbg !99
  %idxprom = sext i32 %7 to i64, !dbg !98
  %arrayidx = getelementptr inbounds i8, ptr %6, i64 %idxprom, !dbg !98
  %8 = load i8, ptr %arrayidx, align 1, !dbg !98
  %conv7 = sext i8 %8 to i32, !dbg !100
  %cmp8 = icmp sgt i32 %conv7, 0, !dbg !101
  br i1 %cmp8, label %while.body10, label %while.end, !dbg !97

while.body10:                                     ; preds = %while.cond6
  %9 = load ptr, ptr %s.addr, align 8, !dbg !102
  %10 = load i32, ptr %i, align 4, !dbg !103
  %inc = add nsw i32 %10, 1, !dbg !103
  store i32 %inc, ptr %i, align 4, !dbg !103
  %idxprom11 = sext i32 %10 to i64, !dbg !102
  %arrayidx12 = getelementptr inbounds i8, ptr %9, i64 %idxprom11, !dbg !102
  %11 = load i8, ptr %arrayidx12, align 1, !dbg !102
  %12 = load ptr, ptr %p, align 8, !dbg !104
  %13 = load i32, ptr %j, align 4, !dbg !105
  %inc13 = add nsw i32 %13, 1, !dbg !105
  store i32 %inc13, ptr %j, align 4, !dbg !105
  %idxprom14 = sext i32 %13 to i64, !dbg !104
  %arrayidx15 = getelementptr inbounds i8, ptr %12, i64 %idxprom14, !dbg !104
  store i8 %11, ptr %arrayidx15, align 1, !dbg !106
  br label %while.cond6, !dbg !97, !llvm.loop !107

while.end:                                        ; preds = %while.cond6
  %14 = load i32, ptr %j, align 4, !dbg !110
  %cmp16 = icmp sgt i32 %14, 0, !dbg !112
  br i1 %cmp16, label %if.then18, label %if.end22, !dbg !113

if.then18:                                        ; preds = %while.end
  %15 = load ptr, ptr %p, align 8, !dbg !114
  %16 = load i32, ptr %j, align 4, !dbg !116
  %idxprom19 = sext i32 %16 to i64, !dbg !114
  %arrayidx20 = getelementptr inbounds i8, ptr %15, i64 %idxprom19, !dbg !114
  store i8 0, ptr %arrayidx20, align 1, !dbg !117
  %17 = load ptr, ptr %p, align 8, !dbg !118
  %call21 = call i32 @atoi(ptr noundef %17) #6, !dbg !119
  %18 = load i32, ptr %r, align 4, !dbg !120
  %add = add nsw i32 %18, %call21, !dbg !120
  store i32 %add, ptr %r, align 4, !dbg !120
  br label %if.end22, !dbg !121

if.end22:                                         ; preds = %if.then18, %while.end
  %19 = load i32, ptr %i, align 4, !dbg !122
  %inc23 = add nsw i32 %19, 1, !dbg !122
  store i32 %inc23, ptr %i, align 4, !dbg !122
  br label %while.cond, !dbg !91, !llvm.loop !123

while.end24:                                      ; preds = %while.cond
  %20 = load i32, ptr %r, align 4, !dbg !125
  %cmp25 = icmp sge i32 %20, 0, !dbg !127
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !128

if.then27:                                        ; preds = %while.end24
  %21 = load ptr, ptr %p, align 8, !dbg !129
  call void @free(ptr noundef %21) #5, !dbg !130
  br label %if.end28, !dbg !130

if.end28:                                         ; preds = %if.then27, %while.end24
  %22 = load i32, ptr %r, align 4, !dbg !131
  ret i32 %22, !dbg !132
}

declare dso_local i64 @strlen(ptr noundef) #3

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @atoi(ptr noundef) #4

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !133 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !137, metadata !DIExpression()), !dbg !138
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !139, metadata !DIExpression()), !dbg !140
  call void @llvm.dbg.declare(metadata ptr %i, metadata !141, metadata !DIExpression()), !dbg !142
  store i32 1, ptr %i, align 4, !dbg !143
  br label %for.cond, !dbg !145

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !146
  %1 = load i32, ptr %argc.addr, align 4, !dbg !148
  %cmp = icmp slt i32 %0, %1, !dbg !149
  br i1 %cmp, label %for.body, label %for.end, !dbg !150

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %argv.addr, align 8, !dbg !151
  %3 = load i32, ptr %i, align 4, !dbg !152
  %idxprom = sext i32 %3 to i64, !dbg !151
  %arrayidx = getelementptr inbounds ptr, ptr %2, i64 %idxprom, !dbg !151
  %4 = load ptr, ptr %arrayidx, align 8, !dbg !151
  %call = call i32 @sum(ptr noundef %4), !dbg !153
  %call1 = call i32 (ptr, ...) @printf(ptr noundef getelementptr inbounds ([4 x i8], ptr @.str, i64 0, i64 0), i32 noundef %call), !dbg !154
  br label %for.inc, !dbg !154

for.inc:                                          ; preds = %for.body
  %5 = load i32, ptr %i, align 4, !dbg !155
  %inc = add nsw i32 %5, 1, !dbg !155
  store i32 %inc, ptr %i, align 4, !dbg !155
  br label %for.cond, !dbg !156, !llvm.loop !157

for.end:                                          ; preds = %for.cond
  %6 = load i32, ptr %retval, align 4, !dbg !159
  ret i32 %6, !dbg !159
}

declare dso_local i32 @printf(ptr noundef, ...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!6, !7, !8, !9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp9.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "8dab305d88a8cfd2e14267cb179393d1")
!2 = !{!3, !4}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!6 = !{i32 7, !"Dwarf Version", i32 5}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{i32 7, !"uwtable", i32 1}
!10 = !{i32 7, !"frame-pointer", i32 2}
!11 = !{!"clang version 14.0.0"}
!12 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !13, file: !13, line: 5, type: !14, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!13 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!14 = !DISubroutineType(types: !15)
!15 = !{!3, !16}
!16 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!17 = !{}
!18 = !DILocalVariable(name: "n", arg: 1, scope: !12, file: !13, line: 5, type: !16)
!19 = !DILocation(line: 5, column: 22, scope: !12)
!20 = !DILocation(line: 6, column: 17, scope: !12)
!21 = !DILocation(line: 6, column: 10, scope: !12)
!22 = !DILocation(line: 6, column: 3, scope: !12)
!23 = distinct !DISubprogram(name: "PLKMALLOC", scope: !13, file: !13, line: 9, type: !14, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!24 = !DILocalVariable(name: "n", arg: 1, scope: !23, file: !13, line: 9, type: !16)
!25 = !DILocation(line: 9, column: 21, scope: !23)
!26 = !DILocation(line: 10, column: 17, scope: !23)
!27 = !DILocation(line: 10, column: 10, scope: !23)
!28 = !DILocation(line: 10, column: 3, scope: !23)
!29 = distinct !DISubprogram(name: "NFRMALLOC", scope: !13, file: !13, line: 13, type: !14, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!30 = !DILocalVariable(name: "n", arg: 1, scope: !29, file: !13, line: 13, type: !16)
!31 = !DILocation(line: 13, column: 21, scope: !29)
!32 = !DILocation(line: 14, column: 17, scope: !29)
!33 = !DILocation(line: 14, column: 10, scope: !29)
!34 = !DILocation(line: 14, column: 3, scope: !29)
!35 = distinct !DISubprogram(name: "CLKMALLOC", scope: !13, file: !13, line: 17, type: !14, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!36 = !DILocalVariable(name: "n", arg: 1, scope: !35, file: !13, line: 17, type: !16)
!37 = !DILocation(line: 17, column: 21, scope: !35)
!38 = !DILocation(line: 18, column: 17, scope: !35)
!39 = !DILocation(line: 18, column: 10, scope: !35)
!40 = !DILocation(line: 18, column: 3, scope: !35)
!41 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !13, file: !13, line: 21, type: !14, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!42 = !DILocalVariable(name: "n", arg: 1, scope: !41, file: !13, line: 21, type: !16)
!43 = !DILocation(line: 21, column: 21, scope: !41)
!44 = !DILocation(line: 22, column: 17, scope: !41)
!45 = !DILocation(line: 22, column: 10, scope: !41)
!46 = !DILocation(line: 22, column: 3, scope: !41)
!47 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !13, file: !13, line: 25, type: !14, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!48 = !DILocalVariable(name: "n", arg: 1, scope: !47, file: !13, line: 25, type: !16)
!49 = !DILocation(line: 25, column: 21, scope: !47)
!50 = !DILocation(line: 26, column: 17, scope: !47)
!51 = !DILocation(line: 26, column: 10, scope: !47)
!52 = !DILocation(line: 26, column: 3, scope: !47)
!53 = distinct !DISubprogram(name: "LEAKFN", scope: !13, file: !13, line: 29, type: !14, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!54 = !DILocalVariable(name: "n", arg: 1, scope: !53, file: !13, line: 29, type: !16)
!55 = !DILocation(line: 29, column: 18, scope: !53)
!56 = !DILocation(line: 30, column: 17, scope: !53)
!57 = !DILocation(line: 30, column: 10, scope: !53)
!58 = !DILocation(line: 30, column: 3, scope: !53)
!59 = distinct !DISubprogram(name: "sum", scope: !60, file: !60, line: 12, type: !61, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!60 = !DIFile(filename: "src/mem_leak/sp9.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "8dab305d88a8cfd2e14267cb179393d1")
!61 = !DISubroutineType(types: !62)
!62 = !{!16, !4}
!63 = !DILocalVariable(name: "s", arg: 1, scope: !59, file: !60, line: 12, type: !4)
!64 = !DILocation(line: 12, column: 15, scope: !59)
!65 = !DILocalVariable(name: "p", scope: !59, file: !60, line: 13, type: !4)
!66 = !DILocation(line: 13, column: 8, scope: !59)
!67 = !DILocalVariable(name: "i", scope: !59, file: !60, line: 14, type: !16)
!68 = !DILocation(line: 14, column: 6, scope: !59)
!69 = !DILocalVariable(name: "j", scope: !59, file: !60, line: 14, type: !16)
!70 = !DILocation(line: 14, column: 13, scope: !59)
!71 = !DILocalVariable(name: "r", scope: !59, file: !60, line: 14, type: !16)
!72 = !DILocation(line: 14, column: 16, scope: !59)
!73 = !DILocalVariable(name: "n", scope: !59, file: !60, line: 14, type: !16)
!74 = !DILocation(line: 14, column: 19, scope: !59)
!75 = !DILocation(line: 14, column: 24, scope: !59)
!76 = !DILocation(line: 14, column: 26, scope: !59)
!77 = !DILocation(line: 14, column: 47, scope: !59)
!78 = !DILocation(line: 14, column: 40, scope: !59)
!79 = !DILocation(line: 14, column: 23, scope: !59)
!80 = !DILocation(line: 15, column: 6, scope: !81)
!81 = distinct !DILexicalBlock(scope: !59, file: !60, line: 15, column: 6)
!82 = !DILocation(line: 15, column: 8, scope: !81)
!83 = !DILocation(line: 15, column: 6, scope: !59)
!84 = !DILocation(line: 16, column: 26, scope: !85)
!85 = distinct !DILexicalBlock(scope: !81, file: !60, line: 15, column: 13)
!86 = !DILocation(line: 16, column: 16, scope: !85)
!87 = !DILocation(line: 16, column: 5, scope: !85)
!88 = !DILocation(line: 17, column: 5, scope: !85)
!89 = !DILocation(line: 18, column: 2, scope: !85)
!90 = !DILocation(line: 19, column: 5, scope: !81)
!91 = !DILocation(line: 20, column: 2, scope: !59)
!92 = !DILocation(line: 20, column: 9, scope: !59)
!93 = !DILocation(line: 20, column: 13, scope: !59)
!94 = !DILocation(line: 20, column: 11, scope: !59)
!95 = !DILocation(line: 21, column: 5, scope: !96)
!96 = distinct !DILexicalBlock(scope: !59, file: !60, line: 20, column: 16)
!97 = !DILocation(line: 22, column: 3, scope: !96)
!98 = !DILocation(line: 22, column: 11, scope: !96)
!99 = !DILocation(line: 22, column: 13, scope: !96)
!100 = !DILocation(line: 22, column: 10, scope: !96)
!101 = !DILocation(line: 22, column: 17, scope: !96)
!102 = !DILocation(line: 23, column: 13, scope: !96)
!103 = !DILocation(line: 23, column: 16, scope: !96)
!104 = !DILocation(line: 23, column: 4, scope: !96)
!105 = !DILocation(line: 23, column: 7, scope: !96)
!106 = !DILocation(line: 23, column: 11, scope: !96)
!107 = distinct !{!107, !97, !108, !109}
!108 = !DILocation(line: 23, column: 18, scope: !96)
!109 = !{!"llvm.loop.mustprogress"}
!110 = !DILocation(line: 24, column: 7, scope: !111)
!111 = distinct !DILexicalBlock(scope: !96, file: !60, line: 24, column: 7)
!112 = !DILocation(line: 24, column: 9, scope: !111)
!113 = !DILocation(line: 24, column: 7, scope: !96)
!114 = !DILocation(line: 25, column: 4, scope: !115)
!115 = distinct !DILexicalBlock(scope: !111, file: !60, line: 24, column: 14)
!116 = !DILocation(line: 25, column: 6, scope: !115)
!117 = !DILocation(line: 25, column: 9, scope: !115)
!118 = !DILocation(line: 26, column: 14, scope: !115)
!119 = !DILocation(line: 26, column: 9, scope: !115)
!120 = !DILocation(line: 26, column: 6, scope: !115)
!121 = !DILocation(line: 27, column: 3, scope: !115)
!122 = !DILocation(line: 28, column: 4, scope: !96)
!123 = distinct !{!123, !91, !124, !109}
!124 = !DILocation(line: 29, column: 2, scope: !59)
!125 = !DILocation(line: 30, column: 6, scope: !126)
!126 = distinct !DILexicalBlock(scope: !59, file: !60, line: 30, column: 6)
!127 = !DILocation(line: 30, column: 8, scope: !126)
!128 = !DILocation(line: 30, column: 6, scope: !59)
!129 = !DILocation(line: 31, column: 8, scope: !126)
!130 = !DILocation(line: 31, column: 3, scope: !126)
!131 = !DILocation(line: 32, column: 9, scope: !59)
!132 = !DILocation(line: 32, column: 2, scope: !59)
!133 = distinct !DISubprogram(name: "main", scope: !60, file: !60, line: 35, type: !134, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!134 = !DISubroutineType(types: !135)
!135 = !{!16, !16, !136}
!136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!137 = !DILocalVariable(name: "argc", arg: 1, scope: !133, file: !60, line: 35, type: !16)
!138 = !DILocation(line: 35, column: 14, scope: !133)
!139 = !DILocalVariable(name: "argv", arg: 2, scope: !133, file: !60, line: 35, type: !136)
!140 = !DILocation(line: 35, column: 26, scope: !133)
!141 = !DILocalVariable(name: "i", scope: !133, file: !60, line: 36, type: !16)
!142 = !DILocation(line: 36, column: 6, scope: !133)
!143 = !DILocation(line: 37, column: 9, scope: !144)
!144 = distinct !DILexicalBlock(scope: !133, file: !60, line: 37, column: 2)
!145 = !DILocation(line: 37, column: 7, scope: !144)
!146 = !DILocation(line: 37, column: 14, scope: !147)
!147 = distinct !DILexicalBlock(scope: !144, file: !60, line: 37, column: 2)
!148 = !DILocation(line: 37, column: 18, scope: !147)
!149 = !DILocation(line: 37, column: 16, scope: !147)
!150 = !DILocation(line: 37, column: 2, scope: !144)
!151 = !DILocation(line: 38, column: 22, scope: !147)
!152 = !DILocation(line: 38, column: 27, scope: !147)
!153 = !DILocation(line: 38, column: 18, scope: !147)
!154 = !DILocation(line: 38, column: 3, scope: !147)
!155 = !DILocation(line: 37, column: 25, scope: !147)
!156 = !DILocation(line: 37, column: 2, scope: !147)
!157 = distinct !{!157, !150, !158, !109}
!158 = !DILocation(line: 38, column: 30, scope: !144)
!159 = !DILocation(line: 39, column: 1, scope: !133)
