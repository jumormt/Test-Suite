; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc50.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc50.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !9 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15, metadata !DIExpression()), !dbg !16
  %0 = load i32, i32* %n.addr, align 4, !dbg !17
  %conv = sext i32 %0 to i64, !dbg !17
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !18
  ret i8* %call, !dbg !19
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !20 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %0 = load i32, i32* %n.addr, align 4, !dbg !23
  %conv = sext i32 %0 to i64, !dbg !23
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !24
  ret i8* %call, !dbg !25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !26 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load i32, i32* %n.addr, align 4, !dbg !29
  %conv = sext i32 %0 to i64, !dbg !29
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !30
  ret i8* %call, !dbg !31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %0 = load i32, i32* %n.addr, align 4, !dbg !35
  %conv = sext i32 %0 to i64, !dbg !35
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !36
  ret i8* %call, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !38 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load i32, i32* %n.addr, align 4, !dbg !41
  %conv = sext i32 %0 to i64, !dbg !41
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !42
  ret i8* %call, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !44 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, i32* %n.addr, align 4, !dbg !47
  %conv = sext i32 %0 to i64, !dbg !47
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !48
  ret i8* %call, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !50 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %0 = load i32, i32* %n.addr, align 4, !dbg !53
  %conv = sext i32 %0 to i64, !dbg !53
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !54
  ret i8* %call, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @tmp() #0 !dbg !56 {
entry:
  %p = alloca i32*, align 8
  %j = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32** %p, metadata !60, metadata !DIExpression()), !dbg !62
  %call = call i8* @PLKMALLOC(i32 1), !dbg !63
  %0 = bitcast i8* %call to i32*, !dbg !63
  store i32* %0, i32** %p, align 8, !dbg !62
  call void @llvm.dbg.declare(metadata i32* %j, metadata !64, metadata !DIExpression()), !dbg !65
  store i32 0, i32* %j, align 4, !dbg !66
  br label %for.cond, !dbg !68

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %j, align 4, !dbg !69
  %cmp = icmp slt i32 %1, 10, !dbg !71
  br i1 %cmp, label %for.body, label %for.end, !dbg !72

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4, !dbg !73
  %cmp1 = icmp sgt i32 %2, 2, !dbg !76
  br i1 %cmp1, label %if.then, label %if.else, !dbg !77

if.then:                                          ; preds = %for.body
  br label %if.end, !dbg !78

if.else:                                          ; preds = %for.body
  br label %return, !dbg !80

if.end:                                           ; preds = %if.then
  br label %for.inc, !dbg !81

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %j, align 4, !dbg !82
  %inc = add nsw i32 %3, 1, !dbg !82
  store i32 %inc, i32* %j, align 4, !dbg !82
  br label %for.cond, !dbg !83, !llvm.loop !84

for.end:                                          ; preds = %for.cond
  %4 = load i32*, i32** %p, align 8, !dbg !87
  %5 = bitcast i32* %4 to i8*, !dbg !87
  call void @free(i8* %5) #3, !dbg !88
  br label %return, !dbg !89

return:                                           ; preds = %for.end, %if.else
  ret void, !dbg !89
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !90 {
entry:
  call void @tmp(), !dbg !93
  ret i32 0, !dbg !94
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc50.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 13.0.0"}
!9 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !10, file: !10, line: 5, type: !11, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !14}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !DILocalVariable(name: "n", arg: 1, scope: !9, file: !10, line: 5, type: !14)
!16 = !DILocation(line: 5, column: 22, scope: !9)
!17 = !DILocation(line: 6, column: 17, scope: !9)
!18 = !DILocation(line: 6, column: 10, scope: !9)
!19 = !DILocation(line: 6, column: 3, scope: !9)
!20 = distinct !DISubprogram(name: "PLKMALLOC", scope: !10, file: !10, line: 9, type: !11, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DILocalVariable(name: "n", arg: 1, scope: !20, file: !10, line: 9, type: !14)
!22 = !DILocation(line: 9, column: 21, scope: !20)
!23 = !DILocation(line: 10, column: 17, scope: !20)
!24 = !DILocation(line: 10, column: 10, scope: !20)
!25 = !DILocation(line: 10, column: 3, scope: !20)
!26 = distinct !DISubprogram(name: "NFRMALLOC", scope: !10, file: !10, line: 13, type: !11, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!27 = !DILocalVariable(name: "n", arg: 1, scope: !26, file: !10, line: 13, type: !14)
!28 = !DILocation(line: 13, column: 21, scope: !26)
!29 = !DILocation(line: 14, column: 17, scope: !26)
!30 = !DILocation(line: 14, column: 10, scope: !26)
!31 = !DILocation(line: 14, column: 3, scope: !26)
!32 = distinct !DISubprogram(name: "CLKMALLOC", scope: !10, file: !10, line: 17, type: !11, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !10, line: 17, type: !14)
!34 = !DILocation(line: 17, column: 21, scope: !32)
!35 = !DILocation(line: 18, column: 17, scope: !32)
!36 = !DILocation(line: 18, column: 10, scope: !32)
!37 = !DILocation(line: 18, column: 3, scope: !32)
!38 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !10, file: !10, line: 21, type: !11, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!39 = !DILocalVariable(name: "n", arg: 1, scope: !38, file: !10, line: 21, type: !14)
!40 = !DILocation(line: 21, column: 21, scope: !38)
!41 = !DILocation(line: 22, column: 17, scope: !38)
!42 = !DILocation(line: 22, column: 10, scope: !38)
!43 = !DILocation(line: 22, column: 3, scope: !38)
!44 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !10, file: !10, line: 25, type: !11, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DILocalVariable(name: "n", arg: 1, scope: !44, file: !10, line: 25, type: !14)
!46 = !DILocation(line: 25, column: 21, scope: !44)
!47 = !DILocation(line: 26, column: 17, scope: !44)
!48 = !DILocation(line: 26, column: 10, scope: !44)
!49 = !DILocation(line: 26, column: 3, scope: !44)
!50 = distinct !DISubprogram(name: "LEAKFN", scope: !10, file: !10, line: 29, type: !11, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!51 = !DILocalVariable(name: "n", arg: 1, scope: !50, file: !10, line: 29, type: !14)
!52 = !DILocation(line: 29, column: 18, scope: !50)
!53 = !DILocation(line: 30, column: 17, scope: !50)
!54 = !DILocation(line: 30, column: 10, scope: !50)
!55 = !DILocation(line: 30, column: 3, scope: !50)
!56 = distinct !DISubprogram(name: "tmp", scope: !57, file: !57, line: 10, type: !58, scopeLine: 10, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!57 = !DIFile(filename: "src/mem_leak/malloc50.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!58 = !DISubroutineType(types: !59)
!59 = !{null}
!60 = !DILocalVariable(name: "p", scope: !56, file: !57, line: 12, type: !61)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!62 = !DILocation(line: 12, column: 8, scope: !56)
!63 = !DILocation(line: 12, column: 12, scope: !56)
!64 = !DILocalVariable(name: "j", scope: !56, file: !57, line: 13, type: !14)
!65 = !DILocation(line: 13, column: 7, scope: !56)
!66 = !DILocation(line: 14, column: 9, scope: !67)
!67 = distinct !DILexicalBlock(scope: !56, file: !57, line: 14, column: 3)
!68 = !DILocation(line: 14, column: 7, scope: !67)
!69 = !DILocation(line: 14, column: 14, scope: !70)
!70 = distinct !DILexicalBlock(scope: !67, file: !57, line: 14, column: 3)
!71 = !DILocation(line: 14, column: 16, scope: !70)
!72 = !DILocation(line: 14, column: 3, scope: !67)
!73 = !DILocation(line: 15, column: 8, scope: !74)
!74 = distinct !DILexicalBlock(scope: !75, file: !57, line: 15, column: 8)
!75 = distinct !DILexicalBlock(scope: !70, file: !57, line: 14, column: 26)
!76 = !DILocation(line: 15, column: 10, scope: !74)
!77 = !DILocation(line: 15, column: 8, scope: !75)
!78 = !DILocation(line: 15, column: 15, scope: !79)
!79 = distinct !DILexicalBlock(scope: !74, file: !57, line: 15, column: 14)
!80 = !DILocation(line: 16, column: 10, scope: !74)
!81 = !DILocation(line: 18, column: 3, scope: !75)
!82 = !DILocation(line: 14, column: 23, scope: !70)
!83 = !DILocation(line: 14, column: 3, scope: !70)
!84 = distinct !{!84, !72, !85, !86}
!85 = !DILocation(line: 18, column: 3, scope: !67)
!86 = !{!"llvm.loop.mustprogress"}
!87 = !DILocation(line: 20, column: 8, scope: !56)
!88 = !DILocation(line: 20, column: 3, scope: !56)
!89 = !DILocation(line: 22, column: 1, scope: !56)
!90 = distinct !DISubprogram(name: "main", scope: !57, file: !57, line: 25, type: !91, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!91 = !DISubroutineType(types: !92)
!92 = !{!14}
!93 = !DILocation(line: 27, column: 3, scope: !90)
!94 = !DILocation(line: 29, column: 1, scope: !90)
