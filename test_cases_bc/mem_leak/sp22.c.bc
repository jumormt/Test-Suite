; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp22.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp22.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !11 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !18, metadata !DIExpression()), !dbg !19
  %0 = load i32, ptr %n.addr, align 4, !dbg !20
  %conv = sext i32 %0 to i64, !dbg !20
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !21
  ret ptr %call, !dbg !22
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !23 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i32, ptr %n.addr, align 4, !dbg !26
  %conv = sext i32 %0 to i64, !dbg !26
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !27
  ret ptr %call, !dbg !28
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !29 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i32, ptr %n.addr, align 4, !dbg !32
  %conv = sext i32 %0 to i64, !dbg !32
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !33
  ret ptr %call, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !35 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %0 = load i32, ptr %n.addr, align 4, !dbg !38
  %conv = sext i32 %0 to i64, !dbg !38
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !39
  ret ptr %call, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !41 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %0 = load i32, ptr %n.addr, align 4, !dbg !44
  %conv = sext i32 %0 to i64, !dbg !44
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !45
  ret ptr %call, !dbg !46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !47 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %0 = load i32, ptr %n.addr, align 4, !dbg !50
  %conv = sext i32 %0 to i64, !dbg !50
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !51
  ret ptr %call, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !53 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %0 = load i32, ptr %n.addr, align 4, !dbg !56
  %conv = sext i32 %0 to i64, !dbg !56
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !57
  ret ptr %call, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %arg1) #0 !dbg !59 {
entry:
  %retval = alloca i32, align 4
  %arg1.addr = alloca i32, align 4
  %p1 = alloca ptr, align 8
  %p2 = alloca ptr, align 8
  %y = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 %arg1, ptr %arg1.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %arg1.addr, metadata !63, metadata !DIExpression()), !dbg !64
  call void @llvm.dbg.declare(metadata ptr %p1, metadata !65, metadata !DIExpression()), !dbg !66
  call void @llvm.dbg.declare(metadata ptr %p2, metadata !67, metadata !DIExpression()), !dbg !68
  call void @llvm.dbg.declare(metadata ptr %y, metadata !69, metadata !DIExpression()), !dbg !70
  store i32 10, ptr %y, align 4, !dbg !70
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !71
  store ptr %call, ptr %p1, align 8, !dbg !72
  %0 = load i32, ptr %y, align 4, !dbg !73
  %tobool = icmp ne i32 %0, 0, !dbg !73
  br i1 %tobool, label %if.then, label %if.end2, !dbg !75

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %p1, align 8, !dbg !76
  %cmp = icmp ne ptr %1, null, !dbg !79
  br i1 %cmp, label %if.then1, label %if.end, !dbg !80

if.then1:                                         ; preds = %if.then
  %2 = load ptr, ptr %p1, align 8, !dbg !81
  call void @free(ptr noundef %2) #3, !dbg !83
  br label %if.end, !dbg !84

if.end:                                           ; preds = %if.then1, %if.then
  br label %if.end2, !dbg !85

if.end2:                                          ; preds = %if.end, %entry
  %3 = load ptr, ptr %p1, align 8, !dbg !86
  call void @free(ptr noundef %3) #3, !dbg !87
  ret i32 0, !dbg !88
}

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp22.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "647e5f3e77d9c1efbd04ef98c046132b")
!2 = !{!3}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{i32 7, !"Dwarf Version", i32 5}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"uwtable", i32 1}
!9 = !{i32 7, !"frame-pointer", i32 2}
!10 = !{!"clang version 14.0.0"}
!11 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !12, file: !12, line: 5, type: !13, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!12 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!13 = !DISubroutineType(types: !14)
!14 = !{!15, !16}
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!16 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!17 = !{}
!18 = !DILocalVariable(name: "n", arg: 1, scope: !11, file: !12, line: 5, type: !16)
!19 = !DILocation(line: 5, column: 22, scope: !11)
!20 = !DILocation(line: 6, column: 17, scope: !11)
!21 = !DILocation(line: 6, column: 10, scope: !11)
!22 = !DILocation(line: 6, column: 3, scope: !11)
!23 = distinct !DISubprogram(name: "PLKMALLOC", scope: !12, file: !12, line: 9, type: !13, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!24 = !DILocalVariable(name: "n", arg: 1, scope: !23, file: !12, line: 9, type: !16)
!25 = !DILocation(line: 9, column: 21, scope: !23)
!26 = !DILocation(line: 10, column: 17, scope: !23)
!27 = !DILocation(line: 10, column: 10, scope: !23)
!28 = !DILocation(line: 10, column: 3, scope: !23)
!29 = distinct !DISubprogram(name: "NFRMALLOC", scope: !12, file: !12, line: 13, type: !13, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!30 = !DILocalVariable(name: "n", arg: 1, scope: !29, file: !12, line: 13, type: !16)
!31 = !DILocation(line: 13, column: 21, scope: !29)
!32 = !DILocation(line: 14, column: 17, scope: !29)
!33 = !DILocation(line: 14, column: 10, scope: !29)
!34 = !DILocation(line: 14, column: 3, scope: !29)
!35 = distinct !DISubprogram(name: "CLKMALLOC", scope: !12, file: !12, line: 17, type: !13, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!36 = !DILocalVariable(name: "n", arg: 1, scope: !35, file: !12, line: 17, type: !16)
!37 = !DILocation(line: 17, column: 21, scope: !35)
!38 = !DILocation(line: 18, column: 17, scope: !35)
!39 = !DILocation(line: 18, column: 10, scope: !35)
!40 = !DILocation(line: 18, column: 3, scope: !35)
!41 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !12, file: !12, line: 21, type: !13, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!42 = !DILocalVariable(name: "n", arg: 1, scope: !41, file: !12, line: 21, type: !16)
!43 = !DILocation(line: 21, column: 21, scope: !41)
!44 = !DILocation(line: 22, column: 17, scope: !41)
!45 = !DILocation(line: 22, column: 10, scope: !41)
!46 = !DILocation(line: 22, column: 3, scope: !41)
!47 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !12, file: !12, line: 25, type: !13, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!48 = !DILocalVariable(name: "n", arg: 1, scope: !47, file: !12, line: 25, type: !16)
!49 = !DILocation(line: 25, column: 21, scope: !47)
!50 = !DILocation(line: 26, column: 17, scope: !47)
!51 = !DILocation(line: 26, column: 10, scope: !47)
!52 = !DILocation(line: 26, column: 3, scope: !47)
!53 = distinct !DISubprogram(name: "LEAKFN", scope: !12, file: !12, line: 29, type: !13, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!54 = !DILocalVariable(name: "n", arg: 1, scope: !53, file: !12, line: 29, type: !16)
!55 = !DILocation(line: 29, column: 18, scope: !53)
!56 = !DILocation(line: 30, column: 17, scope: !53)
!57 = !DILocation(line: 30, column: 10, scope: !53)
!58 = !DILocation(line: 30, column: 3, scope: !53)
!59 = distinct !DISubprogram(name: "main", scope: !60, file: !60, line: 12, type: !61, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!60 = !DIFile(filename: "src/mem_leak/sp22.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "647e5f3e77d9c1efbd04ef98c046132b")
!61 = !DISubroutineType(types: !62)
!62 = !{!16, !16}
!63 = !DILocalVariable(name: "arg1", arg: 1, scope: !59, file: !60, line: 12, type: !16)
!64 = !DILocation(line: 12, column: 14, scope: !59)
!65 = !DILocalVariable(name: "p1", scope: !59, file: !60, line: 14, type: !3)
!66 = !DILocation(line: 14, column: 9, scope: !59)
!67 = !DILocalVariable(name: "p2", scope: !59, file: !60, line: 15, type: !3)
!68 = !DILocation(line: 15, column: 9, scope: !59)
!69 = !DILocalVariable(name: "y", scope: !59, file: !60, line: 16, type: !16)
!70 = !DILocation(line: 16, column: 7, scope: !59)
!71 = !DILocation(line: 17, column: 16, scope: !59)
!72 = !DILocation(line: 17, column: 6, scope: !59)
!73 = !DILocation(line: 20, column: 6, scope: !74)
!74 = distinct !DILexicalBlock(scope: !59, file: !60, line: 20, column: 6)
!75 = !DILocation(line: 20, column: 6, scope: !59)
!76 = !DILocation(line: 21, column: 9, scope: !77)
!77 = distinct !DILexicalBlock(scope: !78, file: !60, line: 21, column: 9)
!78 = distinct !DILexicalBlock(scope: !74, file: !60, line: 20, column: 8)
!79 = !DILocation(line: 21, column: 12, scope: !77)
!80 = !DILocation(line: 21, column: 9, scope: !78)
!81 = !DILocation(line: 22, column: 14, scope: !82)
!82 = distinct !DILexicalBlock(scope: !77, file: !60, line: 21, column: 17)
!83 = !DILocation(line: 22, column: 9, scope: !82)
!84 = !DILocation(line: 23, column: 6, scope: !82)
!85 = !DILocation(line: 25, column: 3, scope: !78)
!86 = !DILocation(line: 27, column: 8, scope: !59)
!87 = !DILocation(line: 27, column: 3, scope: !59)
!88 = !DILocation(line: 28, column: 3, scope: !59)
