; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp8.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp8.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@G = dso_local global i32 0, align 4, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !14 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19, metadata !DIExpression()), !dbg !20
  %0 = load i32, i32* %n.addr, align 4, !dbg !21
  %conv = sext i32 %0 to i64, !dbg !21
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !22
  ret i8* %call, !dbg !23
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !24 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load i32, i32* %n.addr, align 4, !dbg !27
  %conv = sext i32 %0 to i64, !dbg !27
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !28
  ret i8* %call, !dbg !29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !30 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %0 = load i32, i32* %n.addr, align 4, !dbg !33
  %conv = sext i32 %0 to i64, !dbg !33
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !34
  ret i8* %call, !dbg !35
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !36 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %0 = load i32, i32* %n.addr, align 4, !dbg !39
  %conv = sext i32 %0 to i64, !dbg !39
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !40
  ret i8* %call, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !42 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %0 = load i32, i32* %n.addr, align 4, !dbg !45
  %conv = sext i32 %0 to i64, !dbg !45
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !46
  ret i8* %call, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !48 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %0 = load i32, i32* %n.addr, align 4, !dbg !51
  %conv = sext i32 %0 to i64, !dbg !51
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !52
  ret i8* %call, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !54 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %0 = load i32, i32* %n.addr, align 4, !dbg !57
  %conv = sext i32 %0 to i64, !dbg !57
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !58
  ret i8* %call, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @clear_conditioned() #0 !dbg !60 {
entry:
  %buf1 = alloca i8*, align 8
  %buf2 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %buf1, metadata !63, metadata !DIExpression()), !dbg !66
  call void @llvm.dbg.declare(metadata i8** %buf2, metadata !67, metadata !DIExpression()), !dbg !68
  %0 = load i32, i32* @G, align 4, !dbg !69
  %tobool = icmp ne i32 %0, 0, !dbg !69
  br i1 %tobool, label %if.then, label %if.else, !dbg !71

if.then:                                          ; preds = %entry
  %call = call i8* @PLKLEAKFP(i32 10), !dbg !72
  store i8* %call, i8** %buf1, align 8, !dbg !74
  br label %if.end, !dbg !75

if.else:                                          ; preds = %entry
  %call1 = call i8* @PLKLEAKFP(i32 10), !dbg !76
  store i8* %call1, i8** %buf2, align 8, !dbg !78
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load i32, i32* @G, align 4, !dbg !79
  %tobool2 = icmp ne i32 %1, 0, !dbg !79
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !81

if.then3:                                         ; preds = %if.end
  %2 = load i8*, i8** %buf1, align 8, !dbg !82
  call void @free(i8* %2) #3, !dbg !84
  br label %if.end5, !dbg !85

if.else4:                                         ; preds = %if.end
  %3 = load i8*, i8** %buf2, align 8, !dbg !86
  call void @free(i8* %3) #3, !dbg !88
  br label %if.end5

if.end5:                                          ; preds = %if.else4, %if.then3
  ret void, !dbg !89
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @unclear_conditioned(i32 %arg1) #0 !dbg !90 {
entry:
  %arg1.addr = alloca i32, align 4
  %buf1 = alloca i8*, align 8
  %buf2 = alloca i8*, align 8
  %i = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arg1.addr, metadata !93, metadata !DIExpression()), !dbg !94
  call void @llvm.dbg.declare(metadata i8** %buf1, metadata !95, metadata !DIExpression()), !dbg !96
  call void @llvm.dbg.declare(metadata i8** %buf2, metadata !97, metadata !DIExpression()), !dbg !98
  call void @llvm.dbg.declare(metadata i32* %i, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, i32* %arg1.addr, align 4, !dbg !101
  %tobool = icmp ne i32 %0, 0, !dbg !101
  br i1 %tobool, label %if.then, label %if.else, !dbg !103

if.then:                                          ; preds = %entry
  %call = call i8* @PLKMALLOC(i32 10), !dbg !104
  store i8* %call, i8** %buf1, align 8, !dbg !106
  br label %if.end, !dbg !107

if.else:                                          ; preds = %entry
  %call1 = call i8* @PLKLEAKFP(i32 10), !dbg !108
  store i8* %call1, i8** %buf2, align 8, !dbg !110
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load i32, i32* %arg1.addr, align 4, !dbg !111
  %sub = sub nsw i32 %1, 1, !dbg !112
  store i32 %sub, i32* %arg1.addr, align 4, !dbg !113
  %2 = load i32, i32* %arg1.addr, align 4, !dbg !114
  %add = add nsw i32 %2, 10, !dbg !115
  store i32 %add, i32* %arg1.addr, align 4, !dbg !116
  %3 = load i32, i32* %arg1.addr, align 4, !dbg !117
  %tobool2 = icmp ne i32 %3, 0, !dbg !117
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !119

if.then3:                                         ; preds = %if.end
  %4 = load i8*, i8** %buf1, align 8, !dbg !120
  call void @free(i8* %4) #3, !dbg !122
  br label %if.end5, !dbg !123

if.else4:                                         ; preds = %if.end
  %5 = load i8*, i8** %buf2, align 8, !dbg !124
  call void @free(i8* %5) #3, !dbg !126
  br label %if.end5

if.end5:                                          ; preds = %if.else4, %if.then3
  ret void, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !128 {
entry:
  call void @clear_conditioned(), !dbg !131
  %0 = load i32, i32* @G, align 4, !dbg !132
  call void @unclear_conditioned(i32 %0), !dbg !133
  ret i32 0, !dbg !134
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12}
!llvm.ident = !{!13}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "G", scope: !2, file: !6, line: 11, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp8.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/sp8.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 4}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 7, !"uwtable", i32 1}
!12 = !{i32 7, !"frame-pointer", i32 2}
!13 = !{!"clang version 13.0.0"}
!14 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !15, file: !15, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!15 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !7}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!19 = !DILocalVariable(name: "n", arg: 1, scope: !14, file: !15, line: 5, type: !7)
!20 = !DILocation(line: 5, column: 22, scope: !14)
!21 = !DILocation(line: 6, column: 17, scope: !14)
!22 = !DILocation(line: 6, column: 10, scope: !14)
!23 = !DILocation(line: 6, column: 3, scope: !14)
!24 = distinct !DISubprogram(name: "PLKMALLOC", scope: !15, file: !15, line: 9, type: !16, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!25 = !DILocalVariable(name: "n", arg: 1, scope: !24, file: !15, line: 9, type: !7)
!26 = !DILocation(line: 9, column: 21, scope: !24)
!27 = !DILocation(line: 10, column: 17, scope: !24)
!28 = !DILocation(line: 10, column: 10, scope: !24)
!29 = !DILocation(line: 10, column: 3, scope: !24)
!30 = distinct !DISubprogram(name: "NFRMALLOC", scope: !15, file: !15, line: 13, type: !16, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!31 = !DILocalVariable(name: "n", arg: 1, scope: !30, file: !15, line: 13, type: !7)
!32 = !DILocation(line: 13, column: 21, scope: !30)
!33 = !DILocation(line: 14, column: 17, scope: !30)
!34 = !DILocation(line: 14, column: 10, scope: !30)
!35 = !DILocation(line: 14, column: 3, scope: !30)
!36 = distinct !DISubprogram(name: "CLKMALLOC", scope: !15, file: !15, line: 17, type: !16, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!37 = !DILocalVariable(name: "n", arg: 1, scope: !36, file: !15, line: 17, type: !7)
!38 = !DILocation(line: 17, column: 21, scope: !36)
!39 = !DILocation(line: 18, column: 17, scope: !36)
!40 = !DILocation(line: 18, column: 10, scope: !36)
!41 = !DILocation(line: 18, column: 3, scope: !36)
!42 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !15, file: !15, line: 21, type: !16, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!43 = !DILocalVariable(name: "n", arg: 1, scope: !42, file: !15, line: 21, type: !7)
!44 = !DILocation(line: 21, column: 21, scope: !42)
!45 = !DILocation(line: 22, column: 17, scope: !42)
!46 = !DILocation(line: 22, column: 10, scope: !42)
!47 = !DILocation(line: 22, column: 3, scope: !42)
!48 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !15, file: !15, line: 25, type: !16, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!49 = !DILocalVariable(name: "n", arg: 1, scope: !48, file: !15, line: 25, type: !7)
!50 = !DILocation(line: 25, column: 21, scope: !48)
!51 = !DILocation(line: 26, column: 17, scope: !48)
!52 = !DILocation(line: 26, column: 10, scope: !48)
!53 = !DILocation(line: 26, column: 3, scope: !48)
!54 = distinct !DISubprogram(name: "LEAKFN", scope: !15, file: !15, line: 29, type: !16, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!55 = !DILocalVariable(name: "n", arg: 1, scope: !54, file: !15, line: 29, type: !7)
!56 = !DILocation(line: 29, column: 18, scope: !54)
!57 = !DILocation(line: 30, column: 17, scope: !54)
!58 = !DILocation(line: 30, column: 10, scope: !54)
!59 = !DILocation(line: 30, column: 3, scope: !54)
!60 = distinct !DISubprogram(name: "clear_conditioned", scope: !6, file: !6, line: 12, type: !61, scopeLine: 12, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!61 = !DISubroutineType(types: !62)
!62 = !{null}
!63 = !DILocalVariable(name: "buf1", scope: !60, file: !6, line: 13, type: !64)
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64)
!65 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!66 = !DILocation(line: 13, column: 8, scope: !60)
!67 = !DILocalVariable(name: "buf2", scope: !60, file: !6, line: 13, type: !64)
!68 = !DILocation(line: 13, column: 15, scope: !60)
!69 = !DILocation(line: 15, column: 6, scope: !70)
!70 = distinct !DILexicalBlock(scope: !60, file: !6, line: 15, column: 6)
!71 = !DILocation(line: 15, column: 6, scope: !60)
!72 = !DILocation(line: 16, column: 10, scope: !73)
!73 = distinct !DILexicalBlock(scope: !70, file: !6, line: 15, column: 9)
!74 = !DILocation(line: 16, column: 8, scope: !73)
!75 = !DILocation(line: 17, column: 2, scope: !73)
!76 = !DILocation(line: 18, column: 10, scope: !77)
!77 = distinct !DILexicalBlock(scope: !70, file: !6, line: 17, column: 9)
!78 = !DILocation(line: 18, column: 8, scope: !77)
!79 = !DILocation(line: 21, column: 6, scope: !80)
!80 = distinct !DILexicalBlock(scope: !60, file: !6, line: 21, column: 6)
!81 = !DILocation(line: 21, column: 6, scope: !60)
!82 = !DILocation(line: 22, column: 8, scope: !83)
!83 = distinct !DILexicalBlock(scope: !80, file: !6, line: 21, column: 9)
!84 = !DILocation(line: 22, column: 3, scope: !83)
!85 = !DILocation(line: 23, column: 2, scope: !83)
!86 = !DILocation(line: 24, column: 8, scope: !87)
!87 = distinct !DILexicalBlock(scope: !80, file: !6, line: 23, column: 9)
!88 = !DILocation(line: 24, column: 3, scope: !87)
!89 = !DILocation(line: 26, column: 1, scope: !60)
!90 = distinct !DISubprogram(name: "unclear_conditioned", scope: !6, file: !6, line: 29, type: !91, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!91 = !DISubroutineType(types: !92)
!92 = !{null, !7}
!93 = !DILocalVariable(name: "arg1", arg: 1, scope: !90, file: !6, line: 29, type: !7)
!94 = !DILocation(line: 29, column: 30, scope: !90)
!95 = !DILocalVariable(name: "buf1", scope: !90, file: !6, line: 30, type: !64)
!96 = !DILocation(line: 30, column: 8, scope: !90)
!97 = !DILocalVariable(name: "buf2", scope: !90, file: !6, line: 30, type: !64)
!98 = !DILocation(line: 30, column: 15, scope: !90)
!99 = !DILocalVariable(name: "i", scope: !90, file: !6, line: 31, type: !7)
!100 = !DILocation(line: 31, column: 6, scope: !90)
!101 = !DILocation(line: 33, column: 6, scope: !102)
!102 = distinct !DILexicalBlock(scope: !90, file: !6, line: 33, column: 6)
!103 = !DILocation(line: 33, column: 6, scope: !90)
!104 = !DILocation(line: 34, column: 10, scope: !105)
!105 = distinct !DILexicalBlock(scope: !102, file: !6, line: 33, column: 12)
!106 = !DILocation(line: 34, column: 8, scope: !105)
!107 = !DILocation(line: 35, column: 2, scope: !105)
!108 = !DILocation(line: 36, column: 10, scope: !109)
!109 = distinct !DILexicalBlock(scope: !102, file: !6, line: 35, column: 9)
!110 = !DILocation(line: 36, column: 8, scope: !109)
!111 = !DILocation(line: 39, column: 9, scope: !90)
!112 = !DILocation(line: 39, column: 14, scope: !90)
!113 = !DILocation(line: 39, column: 7, scope: !90)
!114 = !DILocation(line: 41, column: 9, scope: !90)
!115 = !DILocation(line: 41, column: 14, scope: !90)
!116 = !DILocation(line: 41, column: 7, scope: !90)
!117 = !DILocation(line: 43, column: 6, scope: !118)
!118 = distinct !DILexicalBlock(scope: !90, file: !6, line: 43, column: 6)
!119 = !DILocation(line: 43, column: 6, scope: !90)
!120 = !DILocation(line: 44, column: 8, scope: !121)
!121 = distinct !DILexicalBlock(scope: !118, file: !6, line: 43, column: 12)
!122 = !DILocation(line: 44, column: 3, scope: !121)
!123 = !DILocation(line: 45, column: 2, scope: !121)
!124 = !DILocation(line: 46, column: 8, scope: !125)
!125 = distinct !DILexicalBlock(scope: !118, file: !6, line: 45, column: 9)
!126 = !DILocation(line: 46, column: 3, scope: !125)
!127 = !DILocation(line: 48, column: 1, scope: !90)
!128 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 50, type: !129, scopeLine: 50, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!129 = !DISubroutineType(types: !130)
!130 = !{!7}
!131 = !DILocation(line: 51, column: 2, scope: !128)
!132 = !DILocation(line: 52, column: 22, scope: !128)
!133 = !DILocation(line: 52, column: 2, scope: !128)
!134 = !DILocation(line: 53, column: 1, scope: !128)
