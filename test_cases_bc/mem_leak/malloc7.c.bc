; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc7.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@g = dso_local global ptr null, align 8, !dbg !0
@.str = private unnamed_addr constant [6 x i8] c"%d,%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !14 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load i32, ptr %n.addr, align 4, !dbg !22
  %conv = sext i32 %0 to i64, !dbg !22
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !23
  ret ptr %call, !dbg !24
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !25 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %0 = load i32, ptr %n.addr, align 4, !dbg !28
  %conv = sext i32 %0 to i64, !dbg !28
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !29
  ret ptr %call, !dbg !30
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !31 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !32, metadata !DIExpression()), !dbg !33
  %0 = load i32, ptr %n.addr, align 4, !dbg !34
  %conv = sext i32 %0 to i64, !dbg !34
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !35
  ret ptr %call, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !37 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %0 = load i32, ptr %n.addr, align 4, !dbg !40
  %conv = sext i32 %0 to i64, !dbg !40
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !41
  ret ptr %call, !dbg !42
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !43 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !44, metadata !DIExpression()), !dbg !45
  %0 = load i32, ptr %n.addr, align 4, !dbg !46
  %conv = sext i32 %0 to i64, !dbg !46
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !47
  ret ptr %call, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !49 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %0 = load i32, ptr %n.addr, align 4, !dbg !52
  %conv = sext i32 %0 to i64, !dbg !52
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !53
  ret ptr %call, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !55 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %0 = load i32, ptr %n.addr, align 4, !dbg !58
  %conv = sext i32 %0 to i64, !dbg !58
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !59
  ret ptr %call, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !61 {
entry:
  %p = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %p, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call ptr @SAFEMALLOC(i32 noundef 1), !dbg !66
  store ptr %call, ptr %p, align 8, !dbg !65
  %0 = load ptr, ptr %p, align 8, !dbg !67
  store ptr %0, ptr @g, align 8, !dbg !68
  %1 = load ptr, ptr @g, align 8, !dbg !69
  %2 = load ptr, ptr %p, align 8, !dbg !70
  %call1 = call i32 (ptr, ...) @printf(ptr noundef getelementptr inbounds ([6 x i8], ptr @.str, i64 0, i64 0), ptr noundef %1, ptr noundef %2), !dbg !71
  ret i32 0, !dbg !72
}

declare dso_local i32 @printf(ptr noundef, ...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12}
!llvm.ident = !{!13}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !5, line: 10, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "82974254a31bb29f249f16832832665c")
!4 = !{!0}
!5 = !DIFile(filename: "src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "82974254a31bb29f249f16832832665c")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 7, !"uwtable", i32 1}
!12 = !{i32 7, !"frame-pointer", i32 2}
!13 = !{!"clang version 14.0.0"}
!14 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !15, file: !15, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!15 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !7}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!19 = !{}
!20 = !DILocalVariable(name: "n", arg: 1, scope: !14, file: !15, line: 5, type: !7)
!21 = !DILocation(line: 5, column: 22, scope: !14)
!22 = !DILocation(line: 6, column: 17, scope: !14)
!23 = !DILocation(line: 6, column: 10, scope: !14)
!24 = !DILocation(line: 6, column: 3, scope: !14)
!25 = distinct !DISubprogram(name: "PLKMALLOC", scope: !15, file: !15, line: 9, type: !16, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!26 = !DILocalVariable(name: "n", arg: 1, scope: !25, file: !15, line: 9, type: !7)
!27 = !DILocation(line: 9, column: 21, scope: !25)
!28 = !DILocation(line: 10, column: 17, scope: !25)
!29 = !DILocation(line: 10, column: 10, scope: !25)
!30 = !DILocation(line: 10, column: 3, scope: !25)
!31 = distinct !DISubprogram(name: "NFRMALLOC", scope: !15, file: !15, line: 13, type: !16, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!32 = !DILocalVariable(name: "n", arg: 1, scope: !31, file: !15, line: 13, type: !7)
!33 = !DILocation(line: 13, column: 21, scope: !31)
!34 = !DILocation(line: 14, column: 17, scope: !31)
!35 = !DILocation(line: 14, column: 10, scope: !31)
!36 = !DILocation(line: 14, column: 3, scope: !31)
!37 = distinct !DISubprogram(name: "CLKMALLOC", scope: !15, file: !15, line: 17, type: !16, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!38 = !DILocalVariable(name: "n", arg: 1, scope: !37, file: !15, line: 17, type: !7)
!39 = !DILocation(line: 17, column: 21, scope: !37)
!40 = !DILocation(line: 18, column: 17, scope: !37)
!41 = !DILocation(line: 18, column: 10, scope: !37)
!42 = !DILocation(line: 18, column: 3, scope: !37)
!43 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !15, file: !15, line: 21, type: !16, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!44 = !DILocalVariable(name: "n", arg: 1, scope: !43, file: !15, line: 21, type: !7)
!45 = !DILocation(line: 21, column: 21, scope: !43)
!46 = !DILocation(line: 22, column: 17, scope: !43)
!47 = !DILocation(line: 22, column: 10, scope: !43)
!48 = !DILocation(line: 22, column: 3, scope: !43)
!49 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !15, file: !15, line: 25, type: !16, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!50 = !DILocalVariable(name: "n", arg: 1, scope: !49, file: !15, line: 25, type: !7)
!51 = !DILocation(line: 25, column: 21, scope: !49)
!52 = !DILocation(line: 26, column: 17, scope: !49)
!53 = !DILocation(line: 26, column: 10, scope: !49)
!54 = !DILocation(line: 26, column: 3, scope: !49)
!55 = distinct !DISubprogram(name: "LEAKFN", scope: !15, file: !15, line: 29, type: !16, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!56 = !DILocalVariable(name: "n", arg: 1, scope: !55, file: !15, line: 29, type: !7)
!57 = !DILocation(line: 29, column: 18, scope: !55)
!58 = !DILocation(line: 30, column: 17, scope: !55)
!59 = !DILocation(line: 30, column: 10, scope: !55)
!60 = !DILocation(line: 30, column: 3, scope: !55)
!61 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 11, type: !62, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!62 = !DISubroutineType(types: !63)
!63 = !{!7}
!64 = !DILocalVariable(name: "p", scope: !61, file: !5, line: 13, type: !6)
!65 = !DILocation(line: 13, column: 7, scope: !61)
!66 = !DILocation(line: 13, column: 11, scope: !61)
!67 = !DILocation(line: 14, column: 6, scope: !61)
!68 = !DILocation(line: 14, column: 4, scope: !61)
!69 = !DILocation(line: 15, column: 17, scope: !61)
!70 = !DILocation(line: 15, column: 19, scope: !61)
!71 = !DILocation(line: 15, column: 2, scope: !61)
!72 = !DILocation(line: 16, column: 1, scope: !61)
