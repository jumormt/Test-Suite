; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc58.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cimage = dso_local global ptr null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !18 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load i32, ptr %n.addr, align 4, !dbg !27
  %conv = sext i32 %0 to i64, !dbg !27
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !28
  ret ptr %call, !dbg !29
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !30 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %0 = load i32, ptr %n.addr, align 4, !dbg !33
  %conv = sext i32 %0 to i64, !dbg !33
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !34
  ret ptr %call, !dbg !35
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !36 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %0 = load i32, ptr %n.addr, align 4, !dbg !39
  %conv = sext i32 %0 to i64, !dbg !39
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !40
  ret ptr %call, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !42 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %0 = load i32, ptr %n.addr, align 4, !dbg !45
  %conv = sext i32 %0 to i64, !dbg !45
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !46
  ret ptr %call, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !48 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %0 = load i32, ptr %n.addr, align 4, !dbg !51
  %conv = sext i32 %0 to i64, !dbg !51
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !52
  ret ptr %call, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !54 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %0 = load i32, ptr %n.addr, align 4, !dbg !57
  %conv = sext i32 %0 to i64, !dbg !57
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !58
  ret ptr %call, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %0 = load i32, ptr %n.addr, align 4, !dbg !63
  %conv = sext i32 %0 to i64, !dbg !63
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !64
  ret ptr %call, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !66 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %superbuffer = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %i, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata ptr %j, metadata !71, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.declare(metadata ptr %superbuffer, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call ptr @NFRMALLOC(i32 noundef 100), !dbg !75
  store ptr %call, ptr %superbuffer, align 8, !dbg !74
  %call1 = call ptr @SAFEMALLOC(i32 noundef 80), !dbg !76
  store ptr %call1, ptr @cimage, align 8, !dbg !77
  store i32 0, ptr %i, align 4, !dbg !78
  br label %for.cond, !dbg !80

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !81
  %cmp = icmp slt i32 %0, 10, !dbg !83
  br i1 %cmp, label %for.body, label %for.end, !dbg !84

for.body:                                         ; preds = %for.cond
  %call2 = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !85
  %1 = load ptr, ptr @cimage, align 8, !dbg !87
  %2 = load i32, ptr %i, align 4, !dbg !88
  %idxprom = sext i32 %2 to i64, !dbg !87
  %arrayidx = getelementptr inbounds ptr, ptr %1, i64 %idxprom, !dbg !87
  store ptr %call2, ptr %arrayidx, align 8, !dbg !89
  br label %for.inc, !dbg !90

for.inc:                                          ; preds = %for.body
  %3 = load i32, ptr %i, align 4, !dbg !91
  %inc = add nsw i32 %3, 1, !dbg !91
  store i32 %inc, ptr %i, align 4, !dbg !91
  br label %for.cond, !dbg !92, !llvm.loop !93

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %i, align 4, !dbg !96
  br label %for.cond3, !dbg !98

for.cond3:                                        ; preds = %for.inc18, %for.end
  %4 = load i32, ptr %i, align 4, !dbg !99
  %cmp4 = icmp slt i32 %4, 10, !dbg !101
  br i1 %cmp4, label %for.body5, label %for.end20, !dbg !102

for.body5:                                        ; preds = %for.cond3
  store i32 0, ptr %j, align 4, !dbg !103
  br label %for.cond6, !dbg !106

for.cond6:                                        ; preds = %for.inc15, %for.body5
  %5 = load i32, ptr %j, align 4, !dbg !107
  %cmp7 = icmp slt i32 %5, 10, !dbg !109
  br i1 %cmp7, label %for.body8, label %for.end17, !dbg !110

for.body8:                                        ; preds = %for.cond6
  %6 = load ptr, ptr %superbuffer, align 8, !dbg !111
  %7 = load i32, ptr %i, align 4, !dbg !113
  %mul = mul nsw i32 %7, 10, !dbg !114
  %8 = load i32, ptr %j, align 4, !dbg !115
  %add = add nsw i32 %mul, %8, !dbg !116
  %idxprom9 = sext i32 %add to i64, !dbg !111
  %arrayidx10 = getelementptr inbounds i8, ptr %6, i64 %idxprom9, !dbg !111
  %9 = load i8, ptr %arrayidx10, align 1, !dbg !111
  %10 = load ptr, ptr @cimage, align 8, !dbg !117
  %11 = load i32, ptr %i, align 4, !dbg !118
  %idxprom11 = sext i32 %11 to i64, !dbg !117
  %arrayidx12 = getelementptr inbounds ptr, ptr %10, i64 %idxprom11, !dbg !117
  %12 = load ptr, ptr %arrayidx12, align 8, !dbg !117
  %13 = load i32, ptr %j, align 4, !dbg !119
  %idxprom13 = sext i32 %13 to i64, !dbg !117
  %arrayidx14 = getelementptr inbounds i8, ptr %12, i64 %idxprom13, !dbg !117
  store i8 %9, ptr %arrayidx14, align 1, !dbg !120
  br label %for.inc15, !dbg !121

for.inc15:                                        ; preds = %for.body8
  %14 = load i32, ptr %j, align 4, !dbg !122
  %inc16 = add nsw i32 %14, 1, !dbg !122
  store i32 %inc16, ptr %j, align 4, !dbg !122
  br label %for.cond6, !dbg !123, !llvm.loop !124

for.end17:                                        ; preds = %for.cond6
  br label %for.inc18, !dbg !126

for.inc18:                                        ; preds = %for.end17
  %15 = load i32, ptr %i, align 4, !dbg !127
  %inc19 = add nsw i32 %15, 1, !dbg !127
  store i32 %inc19, ptr %i, align 4, !dbg !127
  br label %for.cond3, !dbg !128, !llvm.loop !129

for.end20:                                        ; preds = %for.cond3
  ret i32 0, !dbg !131
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cimage", scope: !2, file: !11, line: 10, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !4, globals: !10, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "00d0398756affb4a7943fcef50211ac2")
!4 = !{!5, !7, !8}
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!6 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!10 = !{!0}
!11 = !DIFile(filename: "src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "00d0398756affb4a7943fcef50211ac2")
!12 = !{i32 7, !"Dwarf Version", i32 5}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 7, !"uwtable", i32 1}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"clang version 14.0.0"}
!18 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !19, file: !19, line: 5, type: !20, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!19 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!20 = !DISubroutineType(types: !21)
!21 = !{!22, !23}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!24 = !{}
!25 = !DILocalVariable(name: "n", arg: 1, scope: !18, file: !19, line: 5, type: !23)
!26 = !DILocation(line: 5, column: 22, scope: !18)
!27 = !DILocation(line: 6, column: 17, scope: !18)
!28 = !DILocation(line: 6, column: 10, scope: !18)
!29 = !DILocation(line: 6, column: 3, scope: !18)
!30 = distinct !DISubprogram(name: "PLKMALLOC", scope: !19, file: !19, line: 9, type: !20, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!31 = !DILocalVariable(name: "n", arg: 1, scope: !30, file: !19, line: 9, type: !23)
!32 = !DILocation(line: 9, column: 21, scope: !30)
!33 = !DILocation(line: 10, column: 17, scope: !30)
!34 = !DILocation(line: 10, column: 10, scope: !30)
!35 = !DILocation(line: 10, column: 3, scope: !30)
!36 = distinct !DISubprogram(name: "NFRMALLOC", scope: !19, file: !19, line: 13, type: !20, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!37 = !DILocalVariable(name: "n", arg: 1, scope: !36, file: !19, line: 13, type: !23)
!38 = !DILocation(line: 13, column: 21, scope: !36)
!39 = !DILocation(line: 14, column: 17, scope: !36)
!40 = !DILocation(line: 14, column: 10, scope: !36)
!41 = !DILocation(line: 14, column: 3, scope: !36)
!42 = distinct !DISubprogram(name: "CLKMALLOC", scope: !19, file: !19, line: 17, type: !20, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!43 = !DILocalVariable(name: "n", arg: 1, scope: !42, file: !19, line: 17, type: !23)
!44 = !DILocation(line: 17, column: 21, scope: !42)
!45 = !DILocation(line: 18, column: 17, scope: !42)
!46 = !DILocation(line: 18, column: 10, scope: !42)
!47 = !DILocation(line: 18, column: 3, scope: !42)
!48 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !19, file: !19, line: 21, type: !20, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!49 = !DILocalVariable(name: "n", arg: 1, scope: !48, file: !19, line: 21, type: !23)
!50 = !DILocation(line: 21, column: 21, scope: !48)
!51 = !DILocation(line: 22, column: 17, scope: !48)
!52 = !DILocation(line: 22, column: 10, scope: !48)
!53 = !DILocation(line: 22, column: 3, scope: !48)
!54 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !19, file: !19, line: 25, type: !20, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!55 = !DILocalVariable(name: "n", arg: 1, scope: !54, file: !19, line: 25, type: !23)
!56 = !DILocation(line: 25, column: 21, scope: !54)
!57 = !DILocation(line: 26, column: 17, scope: !54)
!58 = !DILocation(line: 26, column: 10, scope: !54)
!59 = !DILocation(line: 26, column: 3, scope: !54)
!60 = distinct !DISubprogram(name: "LEAKFN", scope: !19, file: !19, line: 29, type: !20, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!61 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !19, line: 29, type: !23)
!62 = !DILocation(line: 29, column: 18, scope: !60)
!63 = !DILocation(line: 30, column: 17, scope: !60)
!64 = !DILocation(line: 30, column: 10, scope: !60)
!65 = !DILocation(line: 30, column: 3, scope: !60)
!66 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 11, type: !67, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!67 = !DISubroutineType(types: !68)
!68 = !{!23}
!69 = !DILocalVariable(name: "i", scope: !66, file: !11, line: 12, type: !23)
!70 = !DILocation(line: 12, column: 9, scope: !66)
!71 = !DILocalVariable(name: "j", scope: !66, file: !11, line: 12, type: !23)
!72 = !DILocation(line: 12, column: 11, scope: !66)
!73 = !DILocalVariable(name: "superbuffer", scope: !66, file: !11, line: 13, type: !5)
!74 = !DILocation(line: 13, column: 11, scope: !66)
!75 = !DILocation(line: 13, column: 33, scope: !66)
!76 = !DILocation(line: 14, column: 33, scope: !66)
!77 = !DILocation(line: 14, column: 12, scope: !66)
!78 = !DILocation(line: 15, column: 11, scope: !79)
!79 = distinct !DILexicalBlock(scope: !66, file: !11, line: 15, column: 5)
!80 = !DILocation(line: 15, column: 10, scope: !79)
!81 = !DILocation(line: 15, column: 14, scope: !82)
!82 = distinct !DILexicalBlock(scope: !79, file: !11, line: 15, column: 5)
!83 = !DILocation(line: 15, column: 15, scope: !82)
!84 = !DILocation(line: 15, column: 5, scope: !79)
!85 = !DILocation(line: 17, column: 39, scope: !86)
!86 = distinct !DILexicalBlock(scope: !82, file: !11, line: 16, column: 5)
!87 = !DILocation(line: 17, column: 9, scope: !86)
!88 = !DILocation(line: 17, column: 16, scope: !86)
!89 = !DILocation(line: 17, column: 19, scope: !86)
!90 = !DILocation(line: 18, column: 5, scope: !86)
!91 = !DILocation(line: 15, column: 20, scope: !82)
!92 = !DILocation(line: 15, column: 5, scope: !82)
!93 = distinct !{!93, !84, !94, !95}
!94 = !DILocation(line: 18, column: 5, scope: !79)
!95 = !{!"llvm.loop.mustprogress"}
!96 = !DILocation(line: 20, column: 11, scope: !97)
!97 = distinct !DILexicalBlock(scope: !66, file: !11, line: 20, column: 5)
!98 = !DILocation(line: 20, column: 10, scope: !97)
!99 = !DILocation(line: 20, column: 14, scope: !100)
!100 = distinct !DILexicalBlock(scope: !97, file: !11, line: 20, column: 5)
!101 = !DILocation(line: 20, column: 15, scope: !100)
!102 = !DILocation(line: 20, column: 5, scope: !97)
!103 = !DILocation(line: 22, column: 15, scope: !104)
!104 = distinct !DILexicalBlock(scope: !105, file: !11, line: 22, column: 9)
!105 = distinct !DILexicalBlock(scope: !100, file: !11, line: 21, column: 5)
!106 = !DILocation(line: 22, column: 14, scope: !104)
!107 = !DILocation(line: 22, column: 18, scope: !108)
!108 = distinct !DILexicalBlock(scope: !104, file: !11, line: 22, column: 9)
!109 = !DILocation(line: 22, column: 19, scope: !108)
!110 = !DILocation(line: 22, column: 9, scope: !104)
!111 = !DILocation(line: 24, column: 28, scope: !112)
!112 = distinct !DILexicalBlock(scope: !108, file: !11, line: 23, column: 9)
!113 = !DILocation(line: 24, column: 40, scope: !112)
!114 = !DILocation(line: 24, column: 41, scope: !112)
!115 = !DILocation(line: 24, column: 47, scope: !112)
!116 = !DILocation(line: 24, column: 45, scope: !112)
!117 = !DILocation(line: 24, column: 13, scope: !112)
!118 = !DILocation(line: 24, column: 20, scope: !112)
!119 = !DILocation(line: 24, column: 23, scope: !112)
!120 = !DILocation(line: 24, column: 26, scope: !112)
!121 = !DILocation(line: 25, column: 9, scope: !112)
!122 = !DILocation(line: 22, column: 24, scope: !108)
!123 = !DILocation(line: 22, column: 9, scope: !108)
!124 = distinct !{!124, !110, !125, !95}
!125 = !DILocation(line: 25, column: 9, scope: !104)
!126 = !DILocation(line: 26, column: 5, scope: !105)
!127 = !DILocation(line: 20, column: 20, scope: !100)
!128 = !DILocation(line: 20, column: 5, scope: !100)
!129 = distinct !{!129, !102, !130, !95}
!130 = !DILocation(line: 26, column: 5, scope: !97)
!131 = !DILocation(line: 28, column: 5, scope: !66)
