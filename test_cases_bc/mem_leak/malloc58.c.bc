; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc58.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cimage = dso_local global i8** null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !19 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load i32, i32* %n.addr, align 4, !dbg !27
  %conv = sext i32 %0 to i64, !dbg !27
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !28
  ret i8* %call, !dbg !29
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !30 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %0 = load i32, i32* %n.addr, align 4, !dbg !33
  %conv = sext i32 %0 to i64, !dbg !33
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !34
  ret i8* %call, !dbg !35
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !36 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %0 = load i32, i32* %n.addr, align 4, !dbg !39
  %conv = sext i32 %0 to i64, !dbg !39
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !40
  ret i8* %call, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !42 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %0 = load i32, i32* %n.addr, align 4, !dbg !45
  %conv = sext i32 %0 to i64, !dbg !45
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !46
  ret i8* %call, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !48 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %0 = load i32, i32* %n.addr, align 4, !dbg !51
  %conv = sext i32 %0 to i64, !dbg !51
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !52
  ret i8* %call, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !54 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %0 = load i32, i32* %n.addr, align 4, !dbg !57
  %conv = sext i32 %0 to i64, !dbg !57
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !58
  ret i8* %call, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %0 = load i32, i32* %n.addr, align 4, !dbg !63
  %conv = sext i32 %0 to i64, !dbg !63
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !64
  ret i8* %call, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !66 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %superbuffer = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata i32* %j, metadata !71, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.declare(metadata i8** %superbuffer, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i8* @NFRMALLOC(i32 100), !dbg !75
  store i8* %call, i8** %superbuffer, align 8, !dbg !74
  %call1 = call i8* @SAFEMALLOC(i32 80), !dbg !76
  %0 = bitcast i8* %call1 to i8**, !dbg !77
  store i8** %0, i8*** @cimage, align 8, !dbg !78
  store i32 0, i32* %i, align 4, !dbg !79
  br label %for.cond, !dbg !81

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !82
  %cmp = icmp slt i32 %1, 10, !dbg !84
  br i1 %cmp, label %for.body, label %for.end, !dbg !85

for.body:                                         ; preds = %for.cond
  %call2 = call i8* @SAFEMALLOC(i32 10), !dbg !86
  %2 = load i8**, i8*** @cimage, align 8, !dbg !88
  %3 = load i32, i32* %i, align 4, !dbg !89
  %idxprom = sext i32 %3 to i64, !dbg !88
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom, !dbg !88
  store i8* %call2, i8** %arrayidx, align 8, !dbg !90
  br label %for.inc, !dbg !91

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !92
  %inc = add nsw i32 %4, 1, !dbg !92
  store i32 %inc, i32* %i, align 4, !dbg !92
  br label %for.cond, !dbg !93, !llvm.loop !94

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !97
  br label %for.cond3, !dbg !99

for.cond3:                                        ; preds = %for.inc18, %for.end
  %5 = load i32, i32* %i, align 4, !dbg !100
  %cmp4 = icmp slt i32 %5, 10, !dbg !102
  br i1 %cmp4, label %for.body5, label %for.end20, !dbg !103

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4, !dbg !104
  br label %for.cond6, !dbg !107

for.cond6:                                        ; preds = %for.inc15, %for.body5
  %6 = load i32, i32* %j, align 4, !dbg !108
  %cmp7 = icmp slt i32 %6, 10, !dbg !110
  br i1 %cmp7, label %for.body8, label %for.end17, !dbg !111

for.body8:                                        ; preds = %for.cond6
  %7 = load i8*, i8** %superbuffer, align 8, !dbg !112
  %8 = load i32, i32* %i, align 4, !dbg !114
  %mul = mul nsw i32 %8, 10, !dbg !115
  %9 = load i32, i32* %j, align 4, !dbg !116
  %add = add nsw i32 %mul, %9, !dbg !117
  %idxprom9 = sext i32 %add to i64, !dbg !112
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i64 %idxprom9, !dbg !112
  %10 = load i8, i8* %arrayidx10, align 1, !dbg !112
  %11 = load i8**, i8*** @cimage, align 8, !dbg !118
  %12 = load i32, i32* %i, align 4, !dbg !119
  %idxprom11 = sext i32 %12 to i64, !dbg !118
  %arrayidx12 = getelementptr inbounds i8*, i8** %11, i64 %idxprom11, !dbg !118
  %13 = load i8*, i8** %arrayidx12, align 8, !dbg !118
  %14 = load i32, i32* %j, align 4, !dbg !120
  %idxprom13 = sext i32 %14 to i64, !dbg !118
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 %idxprom13, !dbg !118
  store i8 %10, i8* %arrayidx14, align 1, !dbg !121
  br label %for.inc15, !dbg !122

for.inc15:                                        ; preds = %for.body8
  %15 = load i32, i32* %j, align 4, !dbg !123
  %inc16 = add nsw i32 %15, 1, !dbg !123
  store i32 %inc16, i32* %j, align 4, !dbg !123
  br label %for.cond6, !dbg !124, !llvm.loop !125

for.end17:                                        ; preds = %for.cond6
  br label %for.inc18, !dbg !127

for.inc18:                                        ; preds = %for.end17
  %16 = load i32, i32* %i, align 4, !dbg !128
  %inc19 = add nsw i32 %16, 1, !dbg !128
  store i32 %inc19, i32* %i, align 4, !dbg !128
  br label %for.cond3, !dbg !129, !llvm.loop !130

for.end20:                                        ; preds = %for.cond3
  ret i32 0, !dbg !132
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!13, !14, !15, !16, !17}
!llvm.ident = !{!18}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cimage", scope: !2, file: !12, line: 10, type: !8, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !11, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!6, !8, !9}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!11 = !{!0}
!12 = !DIFile(filename: "src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!13 = !{i32 7, !"Dwarf Version", i32 4}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 7, !"uwtable", i32 1}
!17 = !{i32 7, !"frame-pointer", i32 2}
!18 = !{!"clang version 13.0.0"}
!19 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !20, file: !20, line: 5, type: !21, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!20 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!21 = !DISubroutineType(types: !22)
!22 = !{!23, !24}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!25 = !DILocalVariable(name: "n", arg: 1, scope: !19, file: !20, line: 5, type: !24)
!26 = !DILocation(line: 5, column: 22, scope: !19)
!27 = !DILocation(line: 6, column: 17, scope: !19)
!28 = !DILocation(line: 6, column: 10, scope: !19)
!29 = !DILocation(line: 6, column: 3, scope: !19)
!30 = distinct !DISubprogram(name: "PLKMALLOC", scope: !20, file: !20, line: 9, type: !21, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!31 = !DILocalVariable(name: "n", arg: 1, scope: !30, file: !20, line: 9, type: !24)
!32 = !DILocation(line: 9, column: 21, scope: !30)
!33 = !DILocation(line: 10, column: 17, scope: !30)
!34 = !DILocation(line: 10, column: 10, scope: !30)
!35 = !DILocation(line: 10, column: 3, scope: !30)
!36 = distinct !DISubprogram(name: "NFRMALLOC", scope: !20, file: !20, line: 13, type: !21, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!37 = !DILocalVariable(name: "n", arg: 1, scope: !36, file: !20, line: 13, type: !24)
!38 = !DILocation(line: 13, column: 21, scope: !36)
!39 = !DILocation(line: 14, column: 17, scope: !36)
!40 = !DILocation(line: 14, column: 10, scope: !36)
!41 = !DILocation(line: 14, column: 3, scope: !36)
!42 = distinct !DISubprogram(name: "CLKMALLOC", scope: !20, file: !20, line: 17, type: !21, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!43 = !DILocalVariable(name: "n", arg: 1, scope: !42, file: !20, line: 17, type: !24)
!44 = !DILocation(line: 17, column: 21, scope: !42)
!45 = !DILocation(line: 18, column: 17, scope: !42)
!46 = !DILocation(line: 18, column: 10, scope: !42)
!47 = !DILocation(line: 18, column: 3, scope: !42)
!48 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !20, file: !20, line: 21, type: !21, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!49 = !DILocalVariable(name: "n", arg: 1, scope: !48, file: !20, line: 21, type: !24)
!50 = !DILocation(line: 21, column: 21, scope: !48)
!51 = !DILocation(line: 22, column: 17, scope: !48)
!52 = !DILocation(line: 22, column: 10, scope: !48)
!53 = !DILocation(line: 22, column: 3, scope: !48)
!54 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !20, file: !20, line: 25, type: !21, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!55 = !DILocalVariable(name: "n", arg: 1, scope: !54, file: !20, line: 25, type: !24)
!56 = !DILocation(line: 25, column: 21, scope: !54)
!57 = !DILocation(line: 26, column: 17, scope: !54)
!58 = !DILocation(line: 26, column: 10, scope: !54)
!59 = !DILocation(line: 26, column: 3, scope: !54)
!60 = distinct !DISubprogram(name: "LEAKFN", scope: !20, file: !20, line: 29, type: !21, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!61 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !20, line: 29, type: !24)
!62 = !DILocation(line: 29, column: 18, scope: !60)
!63 = !DILocation(line: 30, column: 17, scope: !60)
!64 = !DILocation(line: 30, column: 10, scope: !60)
!65 = !DILocation(line: 30, column: 3, scope: !60)
!66 = distinct !DISubprogram(name: "main", scope: !12, file: !12, line: 11, type: !67, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!67 = !DISubroutineType(types: !68)
!68 = !{!24}
!69 = !DILocalVariable(name: "i", scope: !66, file: !12, line: 12, type: !24)
!70 = !DILocation(line: 12, column: 9, scope: !66)
!71 = !DILocalVariable(name: "j", scope: !66, file: !12, line: 12, type: !24)
!72 = !DILocation(line: 12, column: 11, scope: !66)
!73 = !DILocalVariable(name: "superbuffer", scope: !66, file: !12, line: 13, type: !6)
!74 = !DILocation(line: 13, column: 11, scope: !66)
!75 = !DILocation(line: 13, column: 33, scope: !66)
!76 = !DILocation(line: 14, column: 33, scope: !66)
!77 = !DILocation(line: 14, column: 14, scope: !66)
!78 = !DILocation(line: 14, column: 12, scope: !66)
!79 = !DILocation(line: 15, column: 11, scope: !80)
!80 = distinct !DILexicalBlock(scope: !66, file: !12, line: 15, column: 5)
!81 = !DILocation(line: 15, column: 10, scope: !80)
!82 = !DILocation(line: 15, column: 14, scope: !83)
!83 = distinct !DILexicalBlock(scope: !80, file: !12, line: 15, column: 5)
!84 = !DILocation(line: 15, column: 15, scope: !83)
!85 = !DILocation(line: 15, column: 5, scope: !80)
!86 = !DILocation(line: 17, column: 39, scope: !87)
!87 = distinct !DILexicalBlock(scope: !83, file: !12, line: 16, column: 5)
!88 = !DILocation(line: 17, column: 9, scope: !87)
!89 = !DILocation(line: 17, column: 16, scope: !87)
!90 = !DILocation(line: 17, column: 19, scope: !87)
!91 = !DILocation(line: 18, column: 5, scope: !87)
!92 = !DILocation(line: 15, column: 20, scope: !83)
!93 = !DILocation(line: 15, column: 5, scope: !83)
!94 = distinct !{!94, !85, !95, !96}
!95 = !DILocation(line: 18, column: 5, scope: !80)
!96 = !{!"llvm.loop.mustprogress"}
!97 = !DILocation(line: 20, column: 11, scope: !98)
!98 = distinct !DILexicalBlock(scope: !66, file: !12, line: 20, column: 5)
!99 = !DILocation(line: 20, column: 10, scope: !98)
!100 = !DILocation(line: 20, column: 14, scope: !101)
!101 = distinct !DILexicalBlock(scope: !98, file: !12, line: 20, column: 5)
!102 = !DILocation(line: 20, column: 15, scope: !101)
!103 = !DILocation(line: 20, column: 5, scope: !98)
!104 = !DILocation(line: 22, column: 15, scope: !105)
!105 = distinct !DILexicalBlock(scope: !106, file: !12, line: 22, column: 9)
!106 = distinct !DILexicalBlock(scope: !101, file: !12, line: 21, column: 5)
!107 = !DILocation(line: 22, column: 14, scope: !105)
!108 = !DILocation(line: 22, column: 18, scope: !109)
!109 = distinct !DILexicalBlock(scope: !105, file: !12, line: 22, column: 9)
!110 = !DILocation(line: 22, column: 19, scope: !109)
!111 = !DILocation(line: 22, column: 9, scope: !105)
!112 = !DILocation(line: 24, column: 28, scope: !113)
!113 = distinct !DILexicalBlock(scope: !109, file: !12, line: 23, column: 9)
!114 = !DILocation(line: 24, column: 40, scope: !113)
!115 = !DILocation(line: 24, column: 41, scope: !113)
!116 = !DILocation(line: 24, column: 47, scope: !113)
!117 = !DILocation(line: 24, column: 45, scope: !113)
!118 = !DILocation(line: 24, column: 13, scope: !113)
!119 = !DILocation(line: 24, column: 20, scope: !113)
!120 = !DILocation(line: 24, column: 23, scope: !113)
!121 = !DILocation(line: 24, column: 26, scope: !113)
!122 = !DILocation(line: 25, column: 9, scope: !113)
!123 = !DILocation(line: 22, column: 24, scope: !109)
!124 = !DILocation(line: 22, column: 9, scope: !109)
!125 = distinct !{!125, !111, !126, !96}
!126 = !DILocation(line: 25, column: 9, scope: !105)
!127 = !DILocation(line: 26, column: 5, scope: !106)
!128 = !DILocation(line: 20, column: 20, scope: !101)
!129 = !DILocation(line: 20, column: 5, scope: !101)
!130 = distinct !{!130, !103, !131, !96}
!131 = !DILocation(line: 26, column: 5, scope: !98)
!132 = !DILocation(line: 28, column: 5, scope: !66)
