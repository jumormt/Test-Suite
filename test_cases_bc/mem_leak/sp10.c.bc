; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp10.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.List = type { ptr, ptr, ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !20 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %0 = load i32, ptr %n.addr, align 4, !dbg !28
  %conv = sext i32 %0 to i64, !dbg !28
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !29
  ret ptr %call, !dbg !30
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !31 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !32, metadata !DIExpression()), !dbg !33
  %0 = load i32, ptr %n.addr, align 4, !dbg !34
  %conv = sext i32 %0 to i64, !dbg !34
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !35
  ret ptr %call, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !37 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %0 = load i32, ptr %n.addr, align 4, !dbg !40
  %conv = sext i32 %0 to i64, !dbg !40
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !41
  ret ptr %call, !dbg !42
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !43 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !44, metadata !DIExpression()), !dbg !45
  %0 = load i32, ptr %n.addr, align 4, !dbg !46
  %conv = sext i32 %0 to i64, !dbg !46
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !47
  ret ptr %call, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !49 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %0 = load i32, ptr %n.addr, align 4, !dbg !52
  %conv = sext i32 %0 to i64, !dbg !52
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !53
  ret ptr %call, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !55 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %0 = load i32, ptr %n.addr, align 4, !dbg !58
  %conv = sext i32 %0 to i64, !dbg !58
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !59
  ret ptr %call, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !61 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !62, metadata !DIExpression()), !dbg !63
  %0 = load i32, ptr %n.addr, align 4, !dbg !64
  %conv = sext i32 %0 to i64, !dbg !64
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !65
  ret ptr %call, !dbg !66
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @newNode() #0 !dbg !67 {
entry:
  %node = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %node, metadata !70, metadata !DIExpression()), !dbg !71
  %call = call ptr @SAFEMALLOC(i32 noundef 24), !dbg !72
  store ptr %call, ptr %node, align 8, !dbg !73
  %call1 = call ptr @SAFEMALLOC(i32 noundef 4), !dbg !74
  %0 = load ptr, ptr %node, align 8, !dbg !75
  %a = getelementptr inbounds %struct.List, ptr %0, i32 0, i32 2, !dbg !76
  store ptr %call1, ptr %a, align 8, !dbg !77
  %1 = load ptr, ptr %node, align 8, !dbg !78
  ret ptr %1, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @freeNode(ptr noundef %node) #0 !dbg !80 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca ptr, align 8
  store ptr %node, ptr %node.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %node.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %0 = load ptr, ptr %node.addr, align 8, !dbg !85
  call void @free(ptr noundef %0) #3, !dbg !86
  %1 = load ptr, ptr %node.addr, align 8, !dbg !87
  %a = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 2, !dbg !88
  %2 = load ptr, ptr %a, align 8, !dbg !88
  call void @free(ptr noundef %2) #3, !dbg !89
  %3 = load i32, ptr %retval, align 4, !dbg !90
  ret i32 %3, !dbg !90
}

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo() #0 !dbg !91 {
entry:
  %root = alloca ptr, align 8
  %a = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %root, metadata !94, metadata !DIExpression()), !dbg !95
  call void @llvm.dbg.declare(metadata ptr %a, metadata !96, metadata !DIExpression()), !dbg !97
  store i32 10, ptr %a, align 4, !dbg !97
  %call = call ptr @newNode(), !dbg !98
  store ptr %call, ptr %root, align 8, !dbg !99
  %call1 = call ptr @newNode(), !dbg !100
  %0 = load ptr, ptr %root, align 8, !dbg !101
  %next = getelementptr inbounds %struct.List, ptr %0, i32 0, i32 0, !dbg !102
  store ptr %call1, ptr %next, align 8, !dbg !103
  %1 = load ptr, ptr %root, align 8, !dbg !104
  %next2 = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 0, !dbg !105
  %2 = load ptr, ptr %next2, align 8, !dbg !105
  %call3 = call i32 @freeNode(ptr noundef %2), !dbg !106
  %3 = load ptr, ptr %root, align 8, !dbg !107
  %call4 = call i32 @freeNode(ptr noundef %3), !dbg !108
  ret void, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_free(ptr noundef %m) #0 !dbg !110 {
entry:
  %m.addr = alloca ptr, align 8
  store ptr %m, ptr %m.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %m.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load ptr, ptr %m.addr, align 8, !dbg !116
  %1 = load ptr, ptr %0, align 8, !dbg !117
  %buf = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 1, !dbg !118
  %2 = load ptr, ptr %buf, align 8, !dbg !118
  call void @free(ptr noundef %2) #3, !dbg !119
  %3 = load ptr, ptr %m.addr, align 8, !dbg !120
  %4 = load ptr, ptr %3, align 8, !dbg !121
  call void @free(ptr noundef %4) #3, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_init(ptr noundef %x) #0 !dbg !124 {
entry:
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !125, metadata !DIExpression()), !dbg !126
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !127
  %0 = load ptr, ptr %x.addr, align 8, !dbg !128
  %1 = load ptr, ptr %0, align 8, !dbg !129
  %buf = getelementptr inbounds %struct.List, ptr %1, i32 0, i32 1, !dbg !130
  store ptr %call, ptr %buf, align 8, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !133 {
entry:
  %m = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %m, metadata !134, metadata !DIExpression()), !dbg !135
  %call = call ptr @SAFEMALLOC(i32 noundef 24), !dbg !136
  store ptr %call, ptr %m, align 8, !dbg !137
  call void @buffer_init(ptr noundef %m), !dbg !138
  call void @buffer_free(ptr noundef %m), !dbg !139
  ret void, !dbg !140
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp10.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "33cfe96f0f2147d2a86090e885d1ee77")
!2 = !{!3, !12, !9}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !5, line: 11, size: 192, elements: !6)
!5 = !DIFile(filename: "src/mem_leak/sp10.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "33cfe96f0f2147d2a86090e885d1ee77")
!6 = !{!7, !8, !11}
!7 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4, file: !5, line: 12, baseType: !3, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !4, file: !5, line: 13, baseType: !9, size: 64, offset: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !4, file: !5, line: 14, baseType: !12, size: 64, offset: 128)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !{i32 7, !"Dwarf Version", i32 5}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{i32 7, !"uwtable", i32 1}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"clang version 14.0.0"}
!20 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !21, file: !21, line: 5, type: !22, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!21 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!22 = !DISubroutineType(types: !23)
!23 = !{!24, !13}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!25 = !{}
!26 = !DILocalVariable(name: "n", arg: 1, scope: !20, file: !21, line: 5, type: !13)
!27 = !DILocation(line: 5, column: 22, scope: !20)
!28 = !DILocation(line: 6, column: 17, scope: !20)
!29 = !DILocation(line: 6, column: 10, scope: !20)
!30 = !DILocation(line: 6, column: 3, scope: !20)
!31 = distinct !DISubprogram(name: "PLKMALLOC", scope: !21, file: !21, line: 9, type: !22, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!32 = !DILocalVariable(name: "n", arg: 1, scope: !31, file: !21, line: 9, type: !13)
!33 = !DILocation(line: 9, column: 21, scope: !31)
!34 = !DILocation(line: 10, column: 17, scope: !31)
!35 = !DILocation(line: 10, column: 10, scope: !31)
!36 = !DILocation(line: 10, column: 3, scope: !31)
!37 = distinct !DISubprogram(name: "NFRMALLOC", scope: !21, file: !21, line: 13, type: !22, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!38 = !DILocalVariable(name: "n", arg: 1, scope: !37, file: !21, line: 13, type: !13)
!39 = !DILocation(line: 13, column: 21, scope: !37)
!40 = !DILocation(line: 14, column: 17, scope: !37)
!41 = !DILocation(line: 14, column: 10, scope: !37)
!42 = !DILocation(line: 14, column: 3, scope: !37)
!43 = distinct !DISubprogram(name: "CLKMALLOC", scope: !21, file: !21, line: 17, type: !22, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!44 = !DILocalVariable(name: "n", arg: 1, scope: !43, file: !21, line: 17, type: !13)
!45 = !DILocation(line: 17, column: 21, scope: !43)
!46 = !DILocation(line: 18, column: 17, scope: !43)
!47 = !DILocation(line: 18, column: 10, scope: !43)
!48 = !DILocation(line: 18, column: 3, scope: !43)
!49 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !21, file: !21, line: 21, type: !22, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!50 = !DILocalVariable(name: "n", arg: 1, scope: !49, file: !21, line: 21, type: !13)
!51 = !DILocation(line: 21, column: 21, scope: !49)
!52 = !DILocation(line: 22, column: 17, scope: !49)
!53 = !DILocation(line: 22, column: 10, scope: !49)
!54 = !DILocation(line: 22, column: 3, scope: !49)
!55 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !21, file: !21, line: 25, type: !22, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!56 = !DILocalVariable(name: "n", arg: 1, scope: !55, file: !21, line: 25, type: !13)
!57 = !DILocation(line: 25, column: 21, scope: !55)
!58 = !DILocation(line: 26, column: 17, scope: !55)
!59 = !DILocation(line: 26, column: 10, scope: !55)
!60 = !DILocation(line: 26, column: 3, scope: !55)
!61 = distinct !DISubprogram(name: "LEAKFN", scope: !21, file: !21, line: 29, type: !22, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!62 = !DILocalVariable(name: "n", arg: 1, scope: !61, file: !21, line: 29, type: !13)
!63 = !DILocation(line: 29, column: 18, scope: !61)
!64 = !DILocation(line: 30, column: 17, scope: !61)
!65 = !DILocation(line: 30, column: 10, scope: !61)
!66 = !DILocation(line: 30, column: 3, scope: !61)
!67 = distinct !DISubprogram(name: "newNode", scope: !5, file: !5, line: 17, type: !68, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!68 = !DISubroutineType(types: !69)
!69 = !{!3}
!70 = !DILocalVariable(name: "node", scope: !67, file: !5, line: 18, type: !3)
!71 = !DILocation(line: 18, column: 16, scope: !67)
!72 = !DILocation(line: 19, column: 25, scope: !67)
!73 = !DILocation(line: 19, column: 7, scope: !67)
!74 = !DILocation(line: 20, column: 20, scope: !67)
!75 = !DILocation(line: 20, column: 2, scope: !67)
!76 = !DILocation(line: 20, column: 8, scope: !67)
!77 = !DILocation(line: 20, column: 10, scope: !67)
!78 = !DILocation(line: 21, column: 9, scope: !67)
!79 = !DILocation(line: 21, column: 2, scope: !67)
!80 = distinct !DISubprogram(name: "freeNode", scope: !5, file: !5, line: 24, type: !81, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!81 = !DISubroutineType(types: !82)
!82 = !{!13, !3}
!83 = !DILocalVariable(name: "node", arg: 1, scope: !80, file: !5, line: 24, type: !3)
!84 = !DILocation(line: 24, column: 27, scope: !80)
!85 = !DILocation(line: 25, column: 7, scope: !80)
!86 = !DILocation(line: 25, column: 2, scope: !80)
!87 = !DILocation(line: 26, column: 7, scope: !80)
!88 = !DILocation(line: 26, column: 13, scope: !80)
!89 = !DILocation(line: 26, column: 2, scope: !80)
!90 = !DILocation(line: 27, column: 1, scope: !80)
!91 = distinct !DISubprogram(name: "foo", scope: !5, file: !5, line: 29, type: !92, scopeLine: 29, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!92 = !DISubroutineType(types: !93)
!93 = !{null}
!94 = !DILocalVariable(name: "root", scope: !91, file: !5, line: 30, type: !3)
!95 = !DILocation(line: 30, column: 15, scope: !91)
!96 = !DILocalVariable(name: "a", scope: !91, file: !5, line: 31, type: !13)
!97 = !DILocation(line: 31, column: 6, scope: !91)
!98 = !DILocation(line: 32, column: 9, scope: !91)
!99 = !DILocation(line: 32, column: 7, scope: !91)
!100 = !DILocation(line: 33, column: 15, scope: !91)
!101 = !DILocation(line: 33, column: 2, scope: !91)
!102 = !DILocation(line: 33, column: 8, scope: !91)
!103 = !DILocation(line: 33, column: 13, scope: !91)
!104 = !DILocation(line: 34, column: 11, scope: !91)
!105 = !DILocation(line: 34, column: 17, scope: !91)
!106 = !DILocation(line: 34, column: 2, scope: !91)
!107 = !DILocation(line: 35, column: 11, scope: !91)
!108 = !DILocation(line: 35, column: 2, scope: !91)
!109 = !DILocation(line: 36, column: 1, scope: !91)
!110 = distinct !DISubprogram(name: "buffer_free", scope: !5, file: !5, line: 38, type: !111, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!111 = !DISubroutineType(types: !112)
!112 = !{null, !113}
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3, size: 64)
!114 = !DILocalVariable(name: "m", arg: 1, scope: !110, file: !5, line: 38, type: !113)
!115 = !DILocation(line: 38, column: 32, scope: !110)
!116 = !DILocation(line: 39, column: 9, scope: !110)
!117 = !DILocation(line: 39, column: 8, scope: !110)
!118 = !DILocation(line: 39, column: 13, scope: !110)
!119 = !DILocation(line: 39, column: 2, scope: !110)
!120 = !DILocation(line: 40, column: 8, scope: !110)
!121 = !DILocation(line: 40, column: 7, scope: !110)
!122 = !DILocation(line: 40, column: 2, scope: !110)
!123 = !DILocation(line: 41, column: 1, scope: !110)
!124 = distinct !DISubprogram(name: "buffer_init", scope: !5, file: !5, line: 43, type: !111, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!125 = !DILocalVariable(name: "x", arg: 1, scope: !124, file: !5, line: 43, type: !113)
!126 = !DILocation(line: 43, column: 32, scope: !124)
!127 = !DILocation(line: 44, column: 23, scope: !124)
!128 = !DILocation(line: 44, column: 4, scope: !124)
!129 = !DILocation(line: 44, column: 3, scope: !124)
!130 = !DILocation(line: 44, column: 8, scope: !124)
!131 = !DILocation(line: 44, column: 12, scope: !124)
!132 = !DILocation(line: 45, column: 1, scope: !124)
!133 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 47, type: !92, scopeLine: 47, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !25)
!134 = !DILocalVariable(name: "m", scope: !133, file: !5, line: 48, type: !3)
!135 = !DILocation(line: 48, column: 15, scope: !133)
!136 = !DILocation(line: 49, column: 22, scope: !133)
!137 = !DILocation(line: 49, column: 4, scope: !133)
!138 = !DILocation(line: 50, column: 2, scope: !133)
!139 = !DILocation(line: 51, column: 2, scope: !133)
!140 = !DILocation(line: 52, column: 1, scope: !133)
