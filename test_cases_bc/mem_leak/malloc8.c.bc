; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc8.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc8.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [45 x i8] c"Error:  Unable to malloc memory.  Aborting.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !11 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !17, metadata !DIExpression()), !dbg !18
  %0 = load i32, ptr %n.addr, align 4, !dbg !19
  %conv = sext i32 %0 to i64, !dbg !19
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !20
  ret ptr %call, !dbg !21
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !22 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %0 = load i32, ptr %n.addr, align 4, !dbg !25
  %conv = sext i32 %0 to i64, !dbg !25
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !26
  ret ptr %call, !dbg !27
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !28 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !29, metadata !DIExpression()), !dbg !30
  %0 = load i32, ptr %n.addr, align 4, !dbg !31
  %conv = sext i32 %0 to i64, !dbg !31
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !32
  ret ptr %call, !dbg !33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !34 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %0 = load i32, ptr %n.addr, align 4, !dbg !37
  %conv = sext i32 %0 to i64, !dbg !37
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !38
  ret ptr %call, !dbg !39
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !40 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !41, metadata !DIExpression()), !dbg !42
  %0 = load i32, ptr %n.addr, align 4, !dbg !43
  %conv = sext i32 %0 to i64, !dbg !43
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !44
  ret ptr %call, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !46 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %0 = load i32, ptr %n.addr, align 4, !dbg !49
  %conv = sext i32 %0 to i64, !dbg !49
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !50
  ret ptr %call, !dbg !51
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !52 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %0 = load i32, ptr %n.addr, align 4, !dbg !55
  %conv = sext i32 %0 to i64, !dbg !55
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !56
  ret ptr %call, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @my_malloc(i32 noundef %size) #0 !dbg !58 {
entry:
  %size.addr = alloca i32, align 4
  %ret = alloca ptr, align 8
  store i32 %size, ptr %size.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %size.addr, metadata !60, metadata !DIExpression()), !dbg !61
  call void @llvm.dbg.declare(metadata ptr %ret, metadata !62, metadata !DIExpression()), !dbg !63
  %0 = load i32, ptr %size.addr, align 4, !dbg !64
  %call = call ptr @SAFEMALLOC(i32 noundef %0), !dbg !66
  store ptr %call, ptr %ret, align 8, !dbg !67
  %cmp = icmp eq ptr %call, null, !dbg !68
  br i1 %cmp, label %if.then, label %if.end, !dbg !69

if.then:                                          ; preds = %entry
  %call1 = call i32 (ptr, ...) @printf(ptr noundef getelementptr inbounds ([45 x i8], ptr @.str, i64 0, i64 0)), !dbg !70
  call void @exit(i32 noundef 1) #6, !dbg !72
  unreachable, !dbg !72

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %ret, align 8, !dbg !73
  ret ptr %1, !dbg !74
}

declare dso_local i32 @printf(ptr noundef, ...) #3

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32 noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !75 {
entry:
  %side_ordering = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %side_ordering, metadata !78, metadata !DIExpression()), !dbg !79
  %call = call ptr @my_malloc(i32 noundef 40), !dbg !80
  store ptr %call, ptr %side_ordering, align 8, !dbg !79
  %0 = load ptr, ptr %side_ordering, align 8, !dbg !81
  call void @free(ptr noundef %0) #5, !dbg !82
  ret i32 0, !dbg !83
}

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc8.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "4ff05b411e2382e9b06b46bb557de701")
!2 = !{!3}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!5 = !{i32 7, !"Dwarf Version", i32 5}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"uwtable", i32 1}
!9 = !{i32 7, !"frame-pointer", i32 2}
!10 = !{!"clang version 14.0.0"}
!11 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !12, file: !12, line: 5, type: !13, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!12 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!13 = !DISubroutineType(types: !14)
!14 = !{!15, !4}
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!16 = !{}
!17 = !DILocalVariable(name: "n", arg: 1, scope: !11, file: !12, line: 5, type: !4)
!18 = !DILocation(line: 5, column: 22, scope: !11)
!19 = !DILocation(line: 6, column: 17, scope: !11)
!20 = !DILocation(line: 6, column: 10, scope: !11)
!21 = !DILocation(line: 6, column: 3, scope: !11)
!22 = distinct !DISubprogram(name: "PLKMALLOC", scope: !12, file: !12, line: 9, type: !13, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!23 = !DILocalVariable(name: "n", arg: 1, scope: !22, file: !12, line: 9, type: !4)
!24 = !DILocation(line: 9, column: 21, scope: !22)
!25 = !DILocation(line: 10, column: 17, scope: !22)
!26 = !DILocation(line: 10, column: 10, scope: !22)
!27 = !DILocation(line: 10, column: 3, scope: !22)
!28 = distinct !DISubprogram(name: "NFRMALLOC", scope: !12, file: !12, line: 13, type: !13, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!29 = !DILocalVariable(name: "n", arg: 1, scope: !28, file: !12, line: 13, type: !4)
!30 = !DILocation(line: 13, column: 21, scope: !28)
!31 = !DILocation(line: 14, column: 17, scope: !28)
!32 = !DILocation(line: 14, column: 10, scope: !28)
!33 = !DILocation(line: 14, column: 3, scope: !28)
!34 = distinct !DISubprogram(name: "CLKMALLOC", scope: !12, file: !12, line: 17, type: !13, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!35 = !DILocalVariable(name: "n", arg: 1, scope: !34, file: !12, line: 17, type: !4)
!36 = !DILocation(line: 17, column: 21, scope: !34)
!37 = !DILocation(line: 18, column: 17, scope: !34)
!38 = !DILocation(line: 18, column: 10, scope: !34)
!39 = !DILocation(line: 18, column: 3, scope: !34)
!40 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !12, file: !12, line: 21, type: !13, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!41 = !DILocalVariable(name: "n", arg: 1, scope: !40, file: !12, line: 21, type: !4)
!42 = !DILocation(line: 21, column: 21, scope: !40)
!43 = !DILocation(line: 22, column: 17, scope: !40)
!44 = !DILocation(line: 22, column: 10, scope: !40)
!45 = !DILocation(line: 22, column: 3, scope: !40)
!46 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !12, file: !12, line: 25, type: !13, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!47 = !DILocalVariable(name: "n", arg: 1, scope: !46, file: !12, line: 25, type: !4)
!48 = !DILocation(line: 25, column: 21, scope: !46)
!49 = !DILocation(line: 26, column: 17, scope: !46)
!50 = !DILocation(line: 26, column: 10, scope: !46)
!51 = !DILocation(line: 26, column: 3, scope: !46)
!52 = distinct !DISubprogram(name: "LEAKFN", scope: !12, file: !12, line: 29, type: !13, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!53 = !DILocalVariable(name: "n", arg: 1, scope: !52, file: !12, line: 29, type: !4)
!54 = !DILocation(line: 29, column: 18, scope: !52)
!55 = !DILocation(line: 30, column: 17, scope: !52)
!56 = !DILocation(line: 30, column: 10, scope: !52)
!57 = !DILocation(line: 30, column: 3, scope: !52)
!58 = distinct !DISubprogram(name: "my_malloc", scope: !59, file: !59, line: 11, type: !13, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!59 = !DIFile(filename: "src/mem_leak/malloc8.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "4ff05b411e2382e9b06b46bb557de701")
!60 = !DILocalVariable(name: "size", arg: 1, scope: !58, file: !59, line: 11, type: !4)
!61 = !DILocation(line: 11, column: 22, scope: !58)
!62 = !DILocalVariable(name: "ret", scope: !58, file: !59, line: 13, type: !15)
!63 = !DILocation(line: 13, column: 9, scope: !58)
!64 = !DILocation(line: 15, column: 27, scope: !65)
!65 = distinct !DILexicalBlock(scope: !58, file: !59, line: 15, column: 8)
!66 = !DILocation(line: 15, column: 15, scope: !65)
!67 = !DILocation(line: 15, column: 13, scope: !65)
!68 = !DILocation(line: 15, column: 34, scope: !65)
!69 = !DILocation(line: 15, column: 8, scope: !58)
!70 = !DILocation(line: 16, column: 9, scope: !71)
!71 = distinct !DILexicalBlock(scope: !65, file: !59, line: 15, column: 40)
!72 = !DILocation(line: 17, column: 10, scope: !71)
!73 = !DILocation(line: 19, column: 13, scope: !58)
!74 = !DILocation(line: 19, column: 5, scope: !58)
!75 = distinct !DISubprogram(name: "main", scope: !59, file: !59, line: 22, type: !76, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!76 = !DISubroutineType(types: !77)
!77 = !{!4}
!78 = !DILocalVariable(name: "side_ordering", scope: !75, file: !59, line: 25, type: !3)
!79 = !DILocation(line: 25, column: 8, scope: !75)
!80 = !DILocation(line: 25, column: 32, scope: !75)
!81 = !DILocation(line: 27, column: 7, scope: !75)
!82 = !DILocation(line: 27, column: 2, scope: !75)
!83 = !DILocation(line: 28, column: 1, scope: !75)
