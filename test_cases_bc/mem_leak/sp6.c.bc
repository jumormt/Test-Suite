; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp6.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._list = type { ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !15 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32, ptr %n.addr, align 4, !dbg !24
  %conv = sext i32 %0 to i64, !dbg !24
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !25
  ret ptr %call, !dbg !26
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !27 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %0 = load i32, ptr %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !31
  ret ptr %call, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, ptr %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !37
  ret ptr %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load i32, ptr %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !43
  ret ptr %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, ptr %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !49
  ret ptr %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %0 = load i32, ptr %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !55
  ret ptr %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !57 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %0 = load i32, ptr %n.addr, align 4, !dbg !60
  %conv = sext i32 %0 to i64, !dbg !60
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !61
  ret ptr %call, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @make_list(i32 noundef %n) #0 !dbg !63 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %hd = alloca ptr, align 8
  %p = alloca ptr, align 8
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !66, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.declare(metadata ptr %i, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.declare(metadata ptr %hd, metadata !70, metadata !DIExpression()), !dbg !71
  %call = call ptr @SAFEMALLOC(i32 noundef 8), !dbg !72
  store ptr %call, ptr %hd, align 8, !dbg !71
  call void @llvm.dbg.declare(metadata ptr %p, metadata !73, metadata !DIExpression()), !dbg !74
  %0 = load ptr, ptr %hd, align 8, !dbg !75
  store ptr %0, ptr %p, align 8, !dbg !74
  %1 = load ptr, ptr %hd, align 8, !dbg !76
  ret ptr %1, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_list(ptr noundef %hd) #0 !dbg !78 {
entry:
  %hd.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  store ptr %hd, ptr %hd.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %hd.addr, metadata !81, metadata !DIExpression()), !dbg !82
  call void @llvm.dbg.declare(metadata ptr %p, metadata !83, metadata !DIExpression()), !dbg !84
  br label %while.cond, !dbg !85

while.cond:                                       ; preds = %while.body, %entry
  %0 = load ptr, ptr %hd.addr, align 8, !dbg !86
  %cmp = icmp ne ptr %0, null, !dbg !87
  br i1 %cmp, label %while.body, label %while.end, !dbg !85

while.body:                                       ; preds = %while.cond
  %1 = load ptr, ptr %hd.addr, align 8, !dbg !88
  %next = getelementptr inbounds %struct._list, ptr %1, i32 0, i32 0, !dbg !90
  %2 = load ptr, ptr %next, align 8, !dbg !90
  store ptr %2, ptr %p, align 8, !dbg !91
  %3 = load ptr, ptr %hd.addr, align 8, !dbg !92
  call void @free(ptr noundef %3) #3, !dbg !93
  %4 = load ptr, ptr %p, align 8, !dbg !94
  store ptr %4, ptr %hd.addr, align 8, !dbg !95
  br label %while.cond, !dbg !85, !llvm.loop !96

while.end:                                        ; preds = %while.cond
  ret void, !dbg !99
}

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !100 {
entry:
  %l = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %l, metadata !103, metadata !DIExpression()), !dbg !104
  %call = call ptr @make_list(i32 noundef 10), !dbg !105
  store ptr %call, ptr %l, align 8, !dbg !104
  %0 = load ptr, ptr %l, align 8, !dbg !106
  call void @free_list(ptr noundef %0), !dbg !107
  ret void, !dbg !108
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "81f929b093558bbf1bdb845eb05dbb73")
!2 = !{!3}
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "list", file: !4, line: 13, baseType: !5)
!4 = !DIFile(filename: "src/mem_leak/sp6.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "81f929b093558bbf1bdb845eb05dbb73")
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!6 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_list", file: !4, line: 11, size: 64, elements: !7)
!7 = !{!8}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !6, file: !4, line: 12, baseType: !5, size: 64)
!9 = !{i32 7, !"Dwarf Version", i32 5}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{i32 7, !"uwtable", i32 1}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 14.0.0"}
!15 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !16, file: !16, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!16 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!17 = !DISubroutineType(types: !18)
!18 = !{!19, !20}
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !{}
!22 = !DILocalVariable(name: "n", arg: 1, scope: !15, file: !16, line: 5, type: !20)
!23 = !DILocation(line: 5, column: 22, scope: !15)
!24 = !DILocation(line: 6, column: 17, scope: !15)
!25 = !DILocation(line: 6, column: 10, scope: !15)
!26 = !DILocation(line: 6, column: 3, scope: !15)
!27 = distinct !DISubprogram(name: "PLKMALLOC", scope: !16, file: !16, line: 9, type: !17, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!28 = !DILocalVariable(name: "n", arg: 1, scope: !27, file: !16, line: 9, type: !20)
!29 = !DILocation(line: 9, column: 21, scope: !27)
!30 = !DILocation(line: 10, column: 17, scope: !27)
!31 = !DILocation(line: 10, column: 10, scope: !27)
!32 = !DILocation(line: 10, column: 3, scope: !27)
!33 = distinct !DISubprogram(name: "NFRMALLOC", scope: !16, file: !16, line: 13, type: !17, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !16, line: 13, type: !20)
!35 = !DILocation(line: 13, column: 21, scope: !33)
!36 = !DILocation(line: 14, column: 17, scope: !33)
!37 = !DILocation(line: 14, column: 10, scope: !33)
!38 = !DILocation(line: 14, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "CLKMALLOC", scope: !16, file: !16, line: 17, type: !17, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !16, line: 17, type: !20)
!41 = !DILocation(line: 17, column: 21, scope: !39)
!42 = !DILocation(line: 18, column: 17, scope: !39)
!43 = !DILocation(line: 18, column: 10, scope: !39)
!44 = !DILocation(line: 18, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !16, file: !16, line: 21, type: !17, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !16, line: 21, type: !20)
!47 = !DILocation(line: 21, column: 21, scope: !45)
!48 = !DILocation(line: 22, column: 17, scope: !45)
!49 = !DILocation(line: 22, column: 10, scope: !45)
!50 = !DILocation(line: 22, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !16, file: !16, line: 25, type: !17, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !16, line: 25, type: !20)
!53 = !DILocation(line: 25, column: 21, scope: !51)
!54 = !DILocation(line: 26, column: 17, scope: !51)
!55 = !DILocation(line: 26, column: 10, scope: !51)
!56 = !DILocation(line: 26, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "LEAKFN", scope: !16, file: !16, line: 29, type: !17, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!58 = !DILocalVariable(name: "n", arg: 1, scope: !57, file: !16, line: 29, type: !20)
!59 = !DILocation(line: 29, column: 18, scope: !57)
!60 = !DILocation(line: 30, column: 17, scope: !57)
!61 = !DILocation(line: 30, column: 10, scope: !57)
!62 = !DILocation(line: 30, column: 3, scope: !57)
!63 = distinct !DISubprogram(name: "make_list", scope: !4, file: !4, line: 15, type: !64, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!64 = !DISubroutineType(types: !65)
!65 = !{!3, !20}
!66 = !DILocalVariable(name: "n", arg: 1, scope: !63, file: !4, line: 15, type: !20)
!67 = !DILocation(line: 15, column: 20, scope: !63)
!68 = !DILocalVariable(name: "i", scope: !63, file: !4, line: 16, type: !20)
!69 = !DILocation(line: 16, column: 8, scope: !63)
!70 = !DILocalVariable(name: "hd", scope: !63, file: !4, line: 17, type: !3)
!71 = !DILocation(line: 17, column: 9, scope: !63)
!72 = !DILocation(line: 17, column: 20, scope: !63)
!73 = !DILocalVariable(name: "p", scope: !63, file: !4, line: 18, type: !3)
!74 = !DILocation(line: 18, column: 9, scope: !63)
!75 = !DILocation(line: 18, column: 13, scope: !63)
!76 = !DILocation(line: 26, column: 15, scope: !63)
!77 = !DILocation(line: 26, column: 8, scope: !63)
!78 = distinct !DISubprogram(name: "free_list", scope: !4, file: !4, line: 29, type: !79, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!79 = !DISubroutineType(types: !80)
!80 = !{null, !3}
!81 = !DILocalVariable(name: "hd", arg: 1, scope: !78, file: !4, line: 29, type: !3)
!82 = !DILocation(line: 29, column: 21, scope: !78)
!83 = !DILocalVariable(name: "p", scope: !78, file: !4, line: 30, type: !3)
!84 = !DILocation(line: 30, column: 11, scope: !78)
!85 = !DILocation(line: 31, column: 7, scope: !78)
!86 = !DILocation(line: 31, column: 14, scope: !78)
!87 = !DILocation(line: 31, column: 17, scope: !78)
!88 = !DILocation(line: 32, column: 13, scope: !89)
!89 = distinct !DILexicalBlock(scope: !78, file: !4, line: 31, column: 23)
!90 = !DILocation(line: 32, column: 17, scope: !89)
!91 = !DILocation(line: 32, column: 11, scope: !89)
!92 = !DILocation(line: 33, column: 20, scope: !89)
!93 = !DILocation(line: 33, column: 15, scope: !89)
!94 = !DILocation(line: 34, column: 20, scope: !89)
!95 = !DILocation(line: 34, column: 18, scope: !89)
!96 = distinct !{!96, !85, !97, !98}
!97 = !DILocation(line: 35, column: 13, scope: !78)
!98 = !{!"llvm.loop.mustprogress"}
!99 = !DILocation(line: 36, column: 1, scope: !78)
!100 = distinct !DISubprogram(name: "main", scope: !4, file: !4, line: 38, type: !101, scopeLine: 38, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!101 = !DISubroutineType(types: !102)
!102 = !{null}
!103 = !DILocalVariable(name: "l", scope: !100, file: !4, line: 39, type: !3)
!104 = !DILocation(line: 39, column: 10, scope: !100)
!105 = !DILocation(line: 39, column: 14, scope: !100)
!106 = !DILocation(line: 40, column: 15, scope: !100)
!107 = !DILocation(line: 40, column: 5, scope: !100)
!108 = !DILocation(line: 41, column: 1, scope: !100)
