; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp11.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp11.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !11 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %n.addr, align 4, !dbg !18
  %conv = sext i32 %0 to i64, !dbg !18
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !19
  ret i8* %call, !dbg !20
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !21 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32, i32* %n.addr, align 4, !dbg !24
  %conv = sext i32 %0 to i64, !dbg !24
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !25
  ret i8* %call, !dbg !26
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !27 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %0 = load i32, i32* %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !31
  ret i8* %call, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, i32* %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !37
  ret i8* %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load i32, i32* %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !43
  ret i8* %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, i32* %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !49
  ret i8* %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %0 = load i32, i32* %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !55
  ret i8* %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @aliasing(i32** %p) #0 !dbg !57 {
entry:
  %p.addr = alloca i32**, align 8
  store i32** %p, i32*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %p.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !65
  %0 = bitcast i8* %call to i32*, !dbg !65
  %1 = load i32**, i32*** %p.addr, align 8, !dbg !66
  store i32* %0, i32** %1, align 8, !dbg !67
  %2 = load i32**, i32*** %p.addr, align 8, !dbg !68
  %3 = load i32*, i32** %2, align 8, !dbg !69
  ret i32* %3, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !71 {
entry:
  %retval = alloca i32, align 4
  %pp = alloca i32*, align 8
  %t = alloca i32*, align 8
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32** %pp, metadata !74, metadata !DIExpression()), !dbg !75
  call void @llvm.dbg.declare(metadata i32** %t, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call i32* @aliasing(i32** %pp), !dbg !78
  store i32* %call, i32** %t, align 8, !dbg !79
  %0 = load i32*, i32** %t, align 8, !dbg !80
  %cmp = icmp ne i32* %0, null, !dbg !82
  br i1 %cmp, label %if.then, label %if.else, !dbg !83

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %t, align 8, !dbg !84
  %2 = bitcast i32* %1 to i8*, !dbg !84
  call void @free(i8* %2) #4, !dbg !86
  br label %if.end, !dbg !87

if.else:                                          ; preds = %entry
  call void @exit(i32 0) #5, !dbg !88
  unreachable, !dbg !88

if.end:                                           ; preds = %if.then
  ret i32 1, !dbg !90
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp11.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!5 = !{i32 7, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"uwtable", i32 1}
!9 = !{i32 7, !"frame-pointer", i32 2}
!10 = !{!"clang version 13.0.0"}
!11 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !12, file: !12, line: 5, type: !13, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!12 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!13 = !DISubroutineType(types: !14)
!14 = !{!4, !15}
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !DILocalVariable(name: "n", arg: 1, scope: !11, file: !12, line: 5, type: !15)
!17 = !DILocation(line: 5, column: 22, scope: !11)
!18 = !DILocation(line: 6, column: 17, scope: !11)
!19 = !DILocation(line: 6, column: 10, scope: !11)
!20 = !DILocation(line: 6, column: 3, scope: !11)
!21 = distinct !DISubprogram(name: "PLKMALLOC", scope: !12, file: !12, line: 9, type: !13, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DILocalVariable(name: "n", arg: 1, scope: !21, file: !12, line: 9, type: !15)
!23 = !DILocation(line: 9, column: 21, scope: !21)
!24 = !DILocation(line: 10, column: 17, scope: !21)
!25 = !DILocation(line: 10, column: 10, scope: !21)
!26 = !DILocation(line: 10, column: 3, scope: !21)
!27 = distinct !DISubprogram(name: "NFRMALLOC", scope: !12, file: !12, line: 13, type: !13, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!28 = !DILocalVariable(name: "n", arg: 1, scope: !27, file: !12, line: 13, type: !15)
!29 = !DILocation(line: 13, column: 21, scope: !27)
!30 = !DILocation(line: 14, column: 17, scope: !27)
!31 = !DILocation(line: 14, column: 10, scope: !27)
!32 = !DILocation(line: 14, column: 3, scope: !27)
!33 = distinct !DISubprogram(name: "CLKMALLOC", scope: !12, file: !12, line: 17, type: !13, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !12, line: 17, type: !15)
!35 = !DILocation(line: 17, column: 21, scope: !33)
!36 = !DILocation(line: 18, column: 17, scope: !33)
!37 = !DILocation(line: 18, column: 10, scope: !33)
!38 = !DILocation(line: 18, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !12, file: !12, line: 21, type: !13, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !12, line: 21, type: !15)
!41 = !DILocation(line: 21, column: 21, scope: !39)
!42 = !DILocation(line: 22, column: 17, scope: !39)
!43 = !DILocation(line: 22, column: 10, scope: !39)
!44 = !DILocation(line: 22, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !12, file: !12, line: 25, type: !13, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !12, line: 25, type: !15)
!47 = !DILocation(line: 25, column: 21, scope: !45)
!48 = !DILocation(line: 26, column: 17, scope: !45)
!49 = !DILocation(line: 26, column: 10, scope: !45)
!50 = !DILocation(line: 26, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "LEAKFN", scope: !12, file: !12, line: 29, type: !13, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !12, line: 29, type: !15)
!53 = !DILocation(line: 29, column: 18, scope: !51)
!54 = !DILocation(line: 30, column: 17, scope: !51)
!55 = !DILocation(line: 30, column: 10, scope: !51)
!56 = !DILocation(line: 30, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "aliasing", scope: !58, file: !58, line: 11, type: !59, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!58 = !DIFile(filename: "src/mem_leak/sp11.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!59 = !DISubroutineType(types: !60)
!60 = !{!61, !62}
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!63 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !58, line: 11, type: !62)
!64 = !DILocation(line: 11, column: 21, scope: !57)
!65 = !DILocation(line: 12, column: 7, scope: !57)
!66 = !DILocation(line: 12, column: 3, scope: !57)
!67 = !DILocation(line: 12, column: 5, scope: !57)
!68 = !DILocation(line: 13, column: 10, scope: !57)
!69 = !DILocation(line: 13, column: 9, scope: !57)
!70 = !DILocation(line: 13, column: 2, scope: !57)
!71 = distinct !DISubprogram(name: "main", scope: !58, file: !58, line: 16, type: !72, scopeLine: 16, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!72 = !DISubroutineType(types: !73)
!73 = !{!15}
!74 = !DILocalVariable(name: "pp", scope: !71, file: !58, line: 17, type: !61)
!75 = !DILocation(line: 17, column: 7, scope: !71)
!76 = !DILocalVariable(name: "t", scope: !71, file: !58, line: 17, type: !61)
!77 = !DILocation(line: 17, column: 12, scope: !71)
!78 = !DILocation(line: 18, column: 6, scope: !71)
!79 = !DILocation(line: 18, column: 4, scope: !71)
!80 = !DILocation(line: 19, column: 6, scope: !81)
!81 = distinct !DILexicalBlock(scope: !71, file: !58, line: 19, column: 6)
!82 = !DILocation(line: 19, column: 8, scope: !81)
!83 = !DILocation(line: 19, column: 6, scope: !71)
!84 = !DILocation(line: 20, column: 8, scope: !85)
!85 = distinct !DILexicalBlock(scope: !81, file: !58, line: 19, column: 23)
!86 = !DILocation(line: 20, column: 3, scope: !85)
!87 = !DILocation(line: 21, column: 2, scope: !85)
!88 = !DILocation(line: 22, column: 3, scope: !89)
!89 = distinct !DILexicalBlock(scope: !81, file: !58, line: 21, column: 9)
!90 = !DILocation(line: 24, column: 2, scope: !71)
