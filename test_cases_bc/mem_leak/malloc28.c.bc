; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc28.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc28.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.network = type { ptr, ptr }

@net = dso_local global ptr null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !19 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load i32, ptr %n.addr, align 4, !dbg !27
  %conv = sext i32 %0 to i64, !dbg !27
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !28
  ret ptr %call, !dbg !29
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !30 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %0 = load i32, ptr %n.addr, align 4, !dbg !33
  %conv = sext i32 %0 to i64, !dbg !33
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !34
  ret ptr %call, !dbg !35
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !36 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %0 = load i32, ptr %n.addr, align 4, !dbg !39
  %conv = sext i32 %0 to i64, !dbg !39
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !40
  ret ptr %call, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !42 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %0 = load i32, ptr %n.addr, align 4, !dbg !45
  %conv = sext i32 %0 to i64, !dbg !45
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !46
  ret ptr %call, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !48 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %0 = load i32, ptr %n.addr, align 4, !dbg !51
  %conv = sext i32 %0 to i64, !dbg !51
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !52
  ret ptr %call, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !54 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %0 = load i32, ptr %n.addr, align 4, !dbg !57
  %conv = sext i32 %0 to i64, !dbg !57
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !58
  ret ptr %call, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %0 = load i32, ptr %n.addr, align 4, !dbg !63
  %conv = sext i32 %0 to i64, !dbg !63
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !64
  ret ptr %call, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func(ptr noundef %net) #0 !dbg !66 {
entry:
  %net.addr = alloca ptr, align 8
  %arc = alloca ptr, align 8
  store ptr %net, ptr %net.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %net.addr, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata ptr %arc, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !73
  store ptr %call, ptr %arc, align 8, !dbg !72
  %0 = load ptr, ptr %arc, align 8, !dbg !74
  %1 = load ptr, ptr %net.addr, align 8, !dbg !75
  %arcs = getelementptr inbounds %struct.network, ptr %1, i32 0, i32 0, !dbg !76
  store ptr %0, ptr %arcs, align 8, !dbg !77
  %call1 = call ptr @NFRMALLOC(i32 noundef 10), !dbg !78
  %2 = load ptr, ptr %net.addr, align 8, !dbg !79
  %stop_arcs = getelementptr inbounds %struct.network, ptr %2, i32 0, i32 1, !dbg !80
  store ptr %call1, ptr %stop_arcs, align 8, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !83 {
entry:
  %net = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %net, metadata !86, metadata !DIExpression()), !dbg !87
  %call = call ptr @SAFEMALLOC(i32 noundef 20), !dbg !88
  store ptr %call, ptr %net, align 8, !dbg !89
  %0 = load ptr, ptr %net, align 8, !dbg !90
  call void @func(ptr noundef %0), !dbg !91
  %1 = load ptr, ptr %net, align 8, !dbg !92
  call void @free(ptr noundef %1) #3, !dbg !93
  %2 = load ptr, ptr %net, align 8, !dbg !94
  %arcs = getelementptr inbounds %struct.network, ptr %2, i32 0, i32 0, !dbg !95
  %3 = load ptr, ptr %arcs, align 8, !dbg !95
  call void @free(ptr noundef %3) #3, !dbg !96
  ret i32 0, !dbg !97
}

; Function Attrs: nounwind
declare dso_local void @free(ptr noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!13, !14, !15, !16, !17}
!llvm.ident = !{!18}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "net", scope: !2, file: !5, line: 17, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 14.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc28.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "716a4ef3e3c386c4e0473c85d0cd0811")
!4 = !{!0}
!5 = !DIFile(filename: "src/mem_leak/malloc28.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "716a4ef3e3c386c4e0473c85d0cd0811")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "network", file: !5, line: 10, size: 128, elements: !8)
!8 = !{!9, !12}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "arcs", scope: !7, file: !5, line: 12, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "stop_arcs", scope: !7, file: !5, line: 13, baseType: !10, size: 64, offset: 64)
!13 = !{i32 7, !"Dwarf Version", i32 5}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 7, !"uwtable", i32 1}
!17 = !{i32 7, !"frame-pointer", i32 2}
!18 = !{!"clang version 14.0.0"}
!19 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !20, file: !20, line: 5, type: !21, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!20 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!21 = !DISubroutineType(types: !22)
!22 = !{!23, !11}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !{}
!25 = !DILocalVariable(name: "n", arg: 1, scope: !19, file: !20, line: 5, type: !11)
!26 = !DILocation(line: 5, column: 22, scope: !19)
!27 = !DILocation(line: 6, column: 17, scope: !19)
!28 = !DILocation(line: 6, column: 10, scope: !19)
!29 = !DILocation(line: 6, column: 3, scope: !19)
!30 = distinct !DISubprogram(name: "PLKMALLOC", scope: !20, file: !20, line: 9, type: !21, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!31 = !DILocalVariable(name: "n", arg: 1, scope: !30, file: !20, line: 9, type: !11)
!32 = !DILocation(line: 9, column: 21, scope: !30)
!33 = !DILocation(line: 10, column: 17, scope: !30)
!34 = !DILocation(line: 10, column: 10, scope: !30)
!35 = !DILocation(line: 10, column: 3, scope: !30)
!36 = distinct !DISubprogram(name: "NFRMALLOC", scope: !20, file: !20, line: 13, type: !21, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!37 = !DILocalVariable(name: "n", arg: 1, scope: !36, file: !20, line: 13, type: !11)
!38 = !DILocation(line: 13, column: 21, scope: !36)
!39 = !DILocation(line: 14, column: 17, scope: !36)
!40 = !DILocation(line: 14, column: 10, scope: !36)
!41 = !DILocation(line: 14, column: 3, scope: !36)
!42 = distinct !DISubprogram(name: "CLKMALLOC", scope: !20, file: !20, line: 17, type: !21, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!43 = !DILocalVariable(name: "n", arg: 1, scope: !42, file: !20, line: 17, type: !11)
!44 = !DILocation(line: 17, column: 21, scope: !42)
!45 = !DILocation(line: 18, column: 17, scope: !42)
!46 = !DILocation(line: 18, column: 10, scope: !42)
!47 = !DILocation(line: 18, column: 3, scope: !42)
!48 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !20, file: !20, line: 21, type: !21, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!49 = !DILocalVariable(name: "n", arg: 1, scope: !48, file: !20, line: 21, type: !11)
!50 = !DILocation(line: 21, column: 21, scope: !48)
!51 = !DILocation(line: 22, column: 17, scope: !48)
!52 = !DILocation(line: 22, column: 10, scope: !48)
!53 = !DILocation(line: 22, column: 3, scope: !48)
!54 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !20, file: !20, line: 25, type: !21, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!55 = !DILocalVariable(name: "n", arg: 1, scope: !54, file: !20, line: 25, type: !11)
!56 = !DILocation(line: 25, column: 21, scope: !54)
!57 = !DILocation(line: 26, column: 17, scope: !54)
!58 = !DILocation(line: 26, column: 10, scope: !54)
!59 = !DILocation(line: 26, column: 3, scope: !54)
!60 = distinct !DISubprogram(name: "LEAKFN", scope: !20, file: !20, line: 29, type: !21, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!61 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !20, line: 29, type: !11)
!62 = !DILocation(line: 29, column: 18, scope: !60)
!63 = !DILocation(line: 30, column: 17, scope: !60)
!64 = !DILocation(line: 30, column: 10, scope: !60)
!65 = !DILocation(line: 30, column: 3, scope: !60)
!66 = distinct !DISubprogram(name: "func", scope: !5, file: !5, line: 19, type: !67, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!67 = !DISubroutineType(types: !68)
!68 = !{null, !6}
!69 = !DILocalVariable(name: "net", arg: 1, scope: !66, file: !5, line: 19, type: !6)
!70 = !DILocation(line: 19, column: 27, scope: !66)
!71 = !DILocalVariable(name: "arc", scope: !66, file: !5, line: 21, type: !10)
!72 = !DILocation(line: 21, column: 7, scope: !66)
!73 = !DILocation(line: 21, column: 13, scope: !66)
!74 = !DILocation(line: 23, column: 14, scope: !66)
!75 = !DILocation(line: 23, column: 2, scope: !66)
!76 = !DILocation(line: 23, column: 7, scope: !66)
!77 = !DILocation(line: 23, column: 12, scope: !66)
!78 = !DILocation(line: 24, column: 19, scope: !66)
!79 = !DILocation(line: 24, column: 2, scope: !66)
!80 = !DILocation(line: 24, column: 7, scope: !66)
!81 = !DILocation(line: 24, column: 17, scope: !66)
!82 = !DILocation(line: 26, column: 1, scope: !66)
!83 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 28, type: !84, scopeLine: 28, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !24)
!84 = !DISubroutineType(types: !85)
!85 = !{!11}
!86 = !DILocalVariable(name: "net", scope: !83, file: !5, line: 30, type: !6)
!87 = !DILocation(line: 30, column: 18, scope: !83)
!88 = !DILocation(line: 31, column: 8, scope: !83)
!89 = !DILocation(line: 31, column: 6, scope: !83)
!90 = !DILocation(line: 32, column: 7, scope: !83)
!91 = !DILocation(line: 32, column: 2, scope: !83)
!92 = !DILocation(line: 34, column: 7, scope: !83)
!93 = !DILocation(line: 34, column: 2, scope: !83)
!94 = !DILocation(line: 35, column: 7, scope: !83)
!95 = !DILocation(line: 35, column: 12, scope: !83)
!96 = !DILocation(line: 35, column: 2, scope: !83)
!97 = !DILocation(line: 37, column: 1, scope: !83)
