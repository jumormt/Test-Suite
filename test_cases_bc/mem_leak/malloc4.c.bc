; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc4.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc4.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.network = type { i64, i64, i64, double, i32*, i32*, i32* }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !9 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15, metadata !DIExpression()), !dbg !16
  %0 = load i32, i32* %n.addr, align 4, !dbg !17
  %conv = sext i32 %0 to i64, !dbg !17
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !18
  ret i8* %call, !dbg !19
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !20 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %0 = load i32, i32* %n.addr, align 4, !dbg !23
  %conv = sext i32 %0 to i64, !dbg !23
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !24
  ret i8* %call, !dbg !25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !26 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load i32, i32* %n.addr, align 4, !dbg !29
  %conv = sext i32 %0 to i64, !dbg !29
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !30
  ret i8* %call, !dbg !31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %0 = load i32, i32* %n.addr, align 4, !dbg !35
  %conv = sext i32 %0 to i64, !dbg !35
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !36
  ret i8* %call, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !38 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load i32, i32* %n.addr, align 4, !dbg !41
  %conv = sext i32 %0 to i64, !dbg !41
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !42
  ret i8* %call, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !44 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, i32* %n.addr, align 4, !dbg !47
  %conv = sext i32 %0 to i64, !dbg !47
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !48
  ret i8* %call, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !50 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %0 = load i32, i32* %n.addr, align 4, !dbg !53
  %conv = sext i32 %0 to i64, !dbg !53
  %call = call noalias align 16 i8* @malloc(i64 %conv) #3, !dbg !54
  ret i8* %call, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @bar(i32* %s) #0 !dbg !56 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i32*, align 8
  store i32* %s, i32** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %s.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %0 = load i32*, i32** %s.addr, align 8, !dbg !63
  %1 = bitcast i32* %0 to i8*, !dbg !63
  call void @free(i8* %1) #3, !dbg !64
  %2 = load i32, i32* %retval, align 4, !dbg !65
  ret i32 %2, !dbg !65
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @foo(%struct.network* %net) #0 !dbg !66 {
entry:
  %retval = alloca i32, align 4
  %net.addr = alloca %struct.network*, align 8
  %p = alloca i32*, align 8
  %q = alloca i32*, align 8
  store %struct.network* %net, %struct.network** %net.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.network** %net.addr, metadata !82, metadata !DIExpression()), !dbg !83
  call void @llvm.dbg.declare(metadata i32** %p, metadata !84, metadata !DIExpression()), !dbg !85
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !86
  %0 = bitcast i8* %call to i32*, !dbg !86
  store i32* %0, i32** %p, align 8, !dbg !85
  call void @llvm.dbg.declare(metadata i32** %q, metadata !87, metadata !DIExpression()), !dbg !88
  %call1 = call i8* @NFRMALLOC(i32 10), !dbg !89
  %1 = bitcast i8* %call1 to i32*, !dbg !89
  store i32* %1, i32** %q, align 8, !dbg !88
  %2 = load i32*, i32** %p, align 8, !dbg !90
  %3 = load %struct.network*, %struct.network** %net.addr, align 8, !dbg !91
  %arcs = getelementptr inbounds %struct.network, %struct.network* %3, i32 0, i32 4, !dbg !92
  store i32* %2, i32** %arcs, align 8, !dbg !93
  %4 = load i32*, i32** %q, align 8, !dbg !94
  %5 = load %struct.network*, %struct.network** %net.addr, align 8, !dbg !95
  %stop = getelementptr inbounds %struct.network, %struct.network* %5, i32 0, i32 5, !dbg !96
  store i32* %4, i32** %stop, align 8, !dbg !97
  %6 = load %struct.network*, %struct.network** %net.addr, align 8, !dbg !98
  %arcs2 = getelementptr inbounds %struct.network, %struct.network* %6, i32 0, i32 4, !dbg !99
  %7 = load i32*, i32** %arcs2, align 8, !dbg !99
  %call3 = call i32 @bar(i32* %7), !dbg !100
  %8 = load i32, i32* %retval, align 4, !dbg !101
  ret i32 %8, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !102 {
entry:
  %net = alloca %struct.network, align 8
  call void @llvm.dbg.declare(metadata %struct.network* %net, metadata !105, metadata !DIExpression()), !dbg !106
  %call = call i32 @foo(%struct.network* %net), !dbg !107
  ret i32 0, !dbg !108
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc4.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 13.0.0"}
!9 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !10, file: !10, line: 5, type: !11, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !14}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !DILocalVariable(name: "n", arg: 1, scope: !9, file: !10, line: 5, type: !14)
!16 = !DILocation(line: 5, column: 22, scope: !9)
!17 = !DILocation(line: 6, column: 17, scope: !9)
!18 = !DILocation(line: 6, column: 10, scope: !9)
!19 = !DILocation(line: 6, column: 3, scope: !9)
!20 = distinct !DISubprogram(name: "PLKMALLOC", scope: !10, file: !10, line: 9, type: !11, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DILocalVariable(name: "n", arg: 1, scope: !20, file: !10, line: 9, type: !14)
!22 = !DILocation(line: 9, column: 21, scope: !20)
!23 = !DILocation(line: 10, column: 17, scope: !20)
!24 = !DILocation(line: 10, column: 10, scope: !20)
!25 = !DILocation(line: 10, column: 3, scope: !20)
!26 = distinct !DISubprogram(name: "NFRMALLOC", scope: !10, file: !10, line: 13, type: !11, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!27 = !DILocalVariable(name: "n", arg: 1, scope: !26, file: !10, line: 13, type: !14)
!28 = !DILocation(line: 13, column: 21, scope: !26)
!29 = !DILocation(line: 14, column: 17, scope: !26)
!30 = !DILocation(line: 14, column: 10, scope: !26)
!31 = !DILocation(line: 14, column: 3, scope: !26)
!32 = distinct !DISubprogram(name: "CLKMALLOC", scope: !10, file: !10, line: 17, type: !11, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !10, line: 17, type: !14)
!34 = !DILocation(line: 17, column: 21, scope: !32)
!35 = !DILocation(line: 18, column: 17, scope: !32)
!36 = !DILocation(line: 18, column: 10, scope: !32)
!37 = !DILocation(line: 18, column: 3, scope: !32)
!38 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !10, file: !10, line: 21, type: !11, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!39 = !DILocalVariable(name: "n", arg: 1, scope: !38, file: !10, line: 21, type: !14)
!40 = !DILocation(line: 21, column: 21, scope: !38)
!41 = !DILocation(line: 22, column: 17, scope: !38)
!42 = !DILocation(line: 22, column: 10, scope: !38)
!43 = !DILocation(line: 22, column: 3, scope: !38)
!44 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !10, file: !10, line: 25, type: !11, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DILocalVariable(name: "n", arg: 1, scope: !44, file: !10, line: 25, type: !14)
!46 = !DILocation(line: 25, column: 21, scope: !44)
!47 = !DILocation(line: 26, column: 17, scope: !44)
!48 = !DILocation(line: 26, column: 10, scope: !44)
!49 = !DILocation(line: 26, column: 3, scope: !44)
!50 = distinct !DISubprogram(name: "LEAKFN", scope: !10, file: !10, line: 29, type: !11, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!51 = !DILocalVariable(name: "n", arg: 1, scope: !50, file: !10, line: 29, type: !14)
!52 = !DILocation(line: 29, column: 18, scope: !50)
!53 = !DILocation(line: 30, column: 17, scope: !50)
!54 = !DILocation(line: 30, column: 10, scope: !50)
!55 = !DILocation(line: 30, column: 3, scope: !50)
!56 = distinct !DISubprogram(name: "bar", scope: !57, file: !57, line: 22, type: !58, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!57 = !DIFile(filename: "src/mem_leak/malloc4.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!58 = !DISubroutineType(types: !59)
!59 = !{!14, !60}
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!61 = !DILocalVariable(name: "s", arg: 1, scope: !56, file: !57, line: 22, type: !60)
!62 = !DILocation(line: 22, column: 14, scope: !56)
!63 = !DILocation(line: 23, column: 7, scope: !56)
!64 = !DILocation(line: 23, column: 2, scope: !56)
!65 = !DILocation(line: 24, column: 1, scope: !56)
!66 = distinct !DISubprogram(name: "foo", scope: !57, file: !57, line: 26, type: !67, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!67 = !DISubroutineType(types: !68)
!68 = !{!14, !69}
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = !DIDerivedType(tag: DW_TAG_typedef, name: "network_t", file: !57, line: 20, baseType: !71)
!71 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "network", file: !57, line: 11, size: 448, elements: !72)
!72 = !{!73, !75, !76, !77, !79, !80, !81}
!73 = !DIDerivedType(tag: DW_TAG_member, name: "feas_tol", scope: !71, file: !57, line: 13, baseType: !74, size: 64)
!74 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "pert_val", scope: !71, file: !57, line: 14, baseType: !74, size: 64, offset: 64)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "bigM", scope: !71, file: !57, line: 15, baseType: !74, size: 64, offset: 128)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "optcost", scope: !71, file: !57, line: 16, baseType: !78, size: 64, offset: 192)
!78 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "arcs", scope: !71, file: !57, line: 17, baseType: !60, size: 64, offset: 256)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "stop", scope: !71, file: !57, line: 18, baseType: !60, size: 64, offset: 320)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !71, file: !57, line: 19, baseType: !60, size: 64, offset: 384)
!82 = !DILocalVariable(name: "net", arg: 1, scope: !66, file: !57, line: 26, type: !69)
!83 = !DILocation(line: 26, column: 20, scope: !66)
!84 = !DILocalVariable(name: "p", scope: !66, file: !57, line: 27, type: !60)
!85 = !DILocation(line: 27, column: 7, scope: !66)
!86 = !DILocation(line: 27, column: 11, scope: !66)
!87 = !DILocalVariable(name: "q", scope: !66, file: !57, line: 28, type: !60)
!88 = !DILocation(line: 28, column: 7, scope: !66)
!89 = !DILocation(line: 28, column: 11, scope: !66)
!90 = !DILocation(line: 29, column: 14, scope: !66)
!91 = !DILocation(line: 29, column: 2, scope: !66)
!92 = !DILocation(line: 29, column: 7, scope: !66)
!93 = !DILocation(line: 29, column: 12, scope: !66)
!94 = !DILocation(line: 30, column: 14, scope: !66)
!95 = !DILocation(line: 30, column: 2, scope: !66)
!96 = !DILocation(line: 30, column: 7, scope: !66)
!97 = !DILocation(line: 30, column: 12, scope: !66)
!98 = !DILocation(line: 31, column: 6, scope: !66)
!99 = !DILocation(line: 31, column: 11, scope: !66)
!100 = !DILocation(line: 31, column: 2, scope: !66)
!101 = !DILocation(line: 33, column: 1, scope: !66)
!102 = distinct !DISubprogram(name: "main", scope: !57, file: !57, line: 35, type: !103, scopeLine: 35, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!103 = !DISubroutineType(types: !104)
!104 = !{!14}
!105 = !DILocalVariable(name: "net", scope: !102, file: !57, line: 38, type: !70)
!106 = !DILocation(line: 38, column: 12, scope: !102)
!107 = !DILocation(line: 39, column: 2, scope: !102)
!108 = !DILocation(line: 41, column: 1, scope: !102)
